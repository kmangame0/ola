// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pids.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pids.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ola {
namespace rdm {
namespace pid {

namespace {

const ::google::protobuf::Descriptor* LabeledValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabeledValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Manufacturer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Manufacturer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PidStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PidStore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubDeviceRange_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pids_2eproto() {
  protobuf_AddDesc_Pids_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pids.proto");
  GOOGLE_CHECK(file != NULL);
  LabeledValue_descriptor_ = file->message_type(0);
  static const int LabeledValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledValue, label_),
  };
  LabeledValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabeledValue_descriptor_,
      LabeledValue::default_instance_,
      LabeledValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabeledValue));
  Range_descriptor_ = file->message_type(1);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, max_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  Field_descriptor_ = file->message_type(2);
  static const int Field_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, min_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, field_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  FrameFormat_descriptor_ = file->message_type(3);
  static const int FrameFormat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFormat, field_),
  };
  FrameFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameFormat_descriptor_,
      FrameFormat::default_instance_,
      FrameFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameFormat));
  Pid_descriptor_ = file->message_type(4);
  static const int Pid_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, get_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, get_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, set_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, set_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, get_sub_device_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, set_sub_device_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, discovery_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, discovery_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, discovery_sub_device_range_),
  };
  Pid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pid_descriptor_,
      Pid::default_instance_,
      Pid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pid));
  Manufacturer_descriptor_ = file->message_type(5);
  static const int Manufacturer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manufacturer, manufacturer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manufacturer, manufacturer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manufacturer, pid_),
  };
  Manufacturer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Manufacturer_descriptor_,
      Manufacturer::default_instance_,
      Manufacturer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manufacturer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manufacturer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Manufacturer));
  PidStore_descriptor_ = file->message_type(6);
  static const int PidStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidStore, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidStore, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidStore, version_),
  };
  PidStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PidStore_descriptor_,
      PidStore::default_instance_,
      PidStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PidStore));
  SubDeviceRange_descriptor_ = file->enum_type(0);
  FieldType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pids_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabeledValue_descriptor_, &LabeledValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameFormat_descriptor_, &FrameFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pid_descriptor_, &Pid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Manufacturer_descriptor_, &Manufacturer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PidStore_descriptor_, &PidStore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pids_2eproto() {
  delete LabeledValue::default_instance_;
  delete LabeledValue_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete FrameFormat::default_instance_;
  delete FrameFormat_reflection_;
  delete Pid::default_instance_;
  delete Pid_reflection_;
  delete Manufacturer::default_instance_;
  delete Manufacturer_reflection_;
  delete PidStore::default_instance_;
  delete PidStore_reflection_;
}

void protobuf_AddDesc_Pids_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nPids.proto\022\013ola.rdm.pid\",\n\014LabeledValu"
    "e\022\r\n\005value\030\001 \002(\003\022\r\n\005label\030\002 \002(\t\"!\n\005Range"
    "\022\013\n\003min\030\001 \002(\003\022\013\n\003max\030\002 \002(\003\"\343\001\n\005Field\022$\n\004"
    "type\030\001 \002(\0162\026.ola.rdm.pid.FieldType\022\014\n\004na"
    "me\030\002 \002(\t\022\020\n\010min_size\030\003 \001(\r\022\020\n\010max_size\030\004"
    " \001(\r\022\022\n\nmultiplier\030\005 \001(\021\022(\n\005label\030\006 \003(\0132"
    "\031.ola.rdm.pid.LabeledValue\022!\n\005range\030\007 \003("
    "\0132\022.ola.rdm.pid.Range\022!\n\005field\030\010 \003(\0132\022.o"
    "la.rdm.pid.Field\"0\n\013FrameFormat\022!\n\005field"
    "\030\001 \003(\0132\022.ola.rdm.pid.Field\"\202\004\n\003Pid\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\r\022-\n\013get_request\030\003"
    " \001(\0132\030.ola.rdm.pid.FrameFormat\022.\n\014get_re"
    "sponse\030\004 \001(\0132\030.ola.rdm.pid.FrameFormat\022-"
    "\n\013set_request\030\005 \001(\0132\030.ola.rdm.pid.FrameF"
    "ormat\022.\n\014set_response\030\006 \001(\0132\030.ola.rdm.pi"
    "d.FrameFormat\0229\n\024get_sub_device_range\030\007 "
    "\001(\0162\033.ola.rdm.pid.SubDeviceRange\0229\n\024set_"
    "sub_device_range\030\010 \001(\0162\033.ola.rdm.pid.Sub"
    "DeviceRange\0223\n\021discovery_request\030\t \001(\0132\030"
    ".ola.rdm.pid.FrameFormat\0224\n\022discovery_re"
    "sponse\030\n \001(\0132\030.ola.rdm.pid.FrameFormat\022\?"
    "\n\032discovery_sub_device_range\030\013 \001(\0162\033.ola"
    ".rdm.pid.SubDeviceRange\"a\n\014Manufacturer\022"
    "\027\n\017manufacturer_id\030\001 \002(\r\022\031\n\021manufacturer"
    "_name\030\002 \002(\t\022\035\n\003pid\030\003 \003(\0132\020.ola.rdm.pid.P"
    "id\"k\n\010PidStore\022\035\n\003pid\030\001 \003(\0132\020.ola.rdm.pi"
    "d.Pid\022/\n\014manufacturer\030\002 \003(\0132\031.ola.rdm.pi"
    "d.Manufacturer\022\017\n\007version\030\003 \002(\004*h\n\016SubDe"
    "viceRange\022\017\n\013ROOT_DEVICE\020\001\022\031\n\025ROOT_OR_AL"
    "L_SUBDEVICE\020\002\022\025\n\021ROOT_OR_SUBDEVICE\020\003\022\023\n\017"
    "ONLY_SUBDEVICES\020\004*\213\001\n\tFieldType\022\010\n\004BOOL\020"
    "\001\022\t\n\005UINT8\020\002\022\n\n\006UINT16\020\003\022\n\n\006UINT32\020\004\022\n\n\006"
    "STRING\020\005\022\t\n\005GROUP\020\006\022\010\n\004INT8\020\007\022\t\n\005INT16\020\010"
    "\022\t\n\005INT32\020\t\022\010\n\004IPV4\020\n\022\007\n\003UID\020\013\022\007\n\003MAC\020\014", 1359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pids.proto", &protobuf_RegisterTypes);
  LabeledValue::default_instance_ = new LabeledValue();
  Range::default_instance_ = new Range();
  Field::default_instance_ = new Field();
  FrameFormat::default_instance_ = new FrameFormat();
  Pid::default_instance_ = new Pid();
  Manufacturer::default_instance_ = new Manufacturer();
  PidStore::default_instance_ = new PidStore();
  LabeledValue::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  FrameFormat::default_instance_->InitAsDefaultInstance();
  Pid::default_instance_->InitAsDefaultInstance();
  Manufacturer::default_instance_->InitAsDefaultInstance();
  PidStore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pids_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pids_2eproto {
  StaticDescriptorInitializer_Pids_2eproto() {
    protobuf_AddDesc_Pids_2eproto();
  }
} static_descriptor_initializer_Pids_2eproto_;
const ::google::protobuf::EnumDescriptor* SubDeviceRange_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubDeviceRange_descriptor_;
}
bool SubDeviceRange_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldType_descriptor_;
}
bool FieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LabeledValue::kValueFieldNumber;
const int LabeledValue::kLabelFieldNumber;
#endif  // !_MSC_VER

LabeledValue::LabeledValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.LabeledValue)
}

void LabeledValue::InitAsDefaultInstance() {
}

LabeledValue::LabeledValue(const LabeledValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.LabeledValue)
}

void LabeledValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabeledValue::~LabeledValue() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.LabeledValue)
  SharedDtor();
}

void LabeledValue::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void LabeledValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabeledValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabeledValue_descriptor_;
}

const LabeledValue& LabeledValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

LabeledValue* LabeledValue::default_instance_ = NULL;

LabeledValue* LabeledValue::New() const {
  return new LabeledValue;
}

void LabeledValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    value_ = GOOGLE_LONGLONG(0);
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabeledValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.LabeledValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // required string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.LabeledValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.LabeledValue)
  return false;
#undef DO_
}

void LabeledValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.LabeledValue)
  // required int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // required string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.LabeledValue)
}

::google::protobuf::uint8* LabeledValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.LabeledValue)
  // required int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // required string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.LabeledValue)
  return target;
}

int LabeledValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // required string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabeledValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabeledValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabeledValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabeledValue::MergeFrom(const LabeledValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabeledValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledValue::CopyFrom(const LabeledValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LabeledValue::Swap(LabeledValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabeledValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabeledValue_descriptor_;
  metadata.reflection = LabeledValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kMinFieldNumber;
const int Range::kMaxFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.Range)
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Range)
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  min_ = GOOGLE_LONGLONG(0);
  max_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Range*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 min = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // required int64 max = 2;
      case 2: {
        if (tag == 16) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.Range)
  // required int64 min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min(), output);
  }

  // required int64 max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.Range)
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Range)
  // required int64 min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min(), target);
  }

  // required int64 max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Range)
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }

    // required int64 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kTypeFieldNumber;
const int Field::kNameFieldNumber;
const int Field::kMinSizeFieldNumber;
const int Field::kMaxSizeFieldNumber;
const int Field::kMultiplierFieldNumber;
const int Field::kLabelFieldNumber;
const int Field::kRangeFieldNumber;
const int Field::kFieldFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.Field)
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Field)
}

void Field::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_size_ = 0u;
  max_size_ = 0u;
  multiplier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Field*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(min_size_, multiplier_);
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  label_.Clear();
  range_.Clear();
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ola.rdm.pid.FieldType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::rdm::pid::FieldType_IsValid(value)) {
            set_type(static_cast< ::ola::rdm::pid::FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_size;
        break;
      }

      // optional uint32 min_size = 3;
      case 3: {
        if (tag == 24) {
         parse_min_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_size_)));
          set_has_min_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_size;
        break;
      }

      // optional uint32 max_size = 4;
      case 4: {
        if (tag == 32) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiplier;
        break;
      }

      // optional sint32 multiplier = 5;
      case 5: {
        if (tag == 40) {
         parse_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &multiplier_)));
          set_has_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_label;
        break;
      }

      // repeated .ola.rdm.pid.LabeledValue label = 6;
      case 6: {
        if (tag == 50) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_label;
        if (input->ExpectTag(58)) goto parse_range;
        break;
      }

      // repeated .ola.rdm.pid.Range range = 7;
      case 7: {
        if (tag == 58) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_range;
        if (input->ExpectTag(66)) goto parse_field;
        break;
      }

      // repeated .ola.rdm.pid.Field field = 8;
      case 8: {
        if (tag == 66) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.Field)
  // required .ola.rdm.pid.FieldType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 min_size = 3;
  if (has_min_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_size(), output);
  }

  // optional uint32 max_size = 4;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_size(), output);
  }

  // optional sint32 multiplier = 5;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->multiplier(), output);
  }

  // repeated .ola.rdm.pid.LabeledValue label = 6;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->label(i), output);
  }

  // repeated .ola.rdm.pid.Range range = 7;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->range(i), output);
  }

  // repeated .ola.rdm.pid.Field field = 8;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Field)
  // required .ola.rdm.pid.FieldType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 min_size = 3;
  if (has_min_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_size(), target);
  }

  // optional uint32 max_size = 4;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_size(), target);
  }

  // optional sint32 multiplier = 5;
  if (has_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->multiplier(), target);
  }

  // repeated .ola.rdm.pid.LabeledValue label = 6;
  for (int i = 0; i < this->label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->label(i), target);
  }

  // repeated .ola.rdm.pid.Range range = 7;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->range(i), target);
  }

  // repeated .ola.rdm.pid.Field field = 8;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Field)
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ola.rdm.pid.FieldType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 min_size = 3;
    if (has_min_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_size());
    }

    // optional uint32 max_size = 4;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_size());
    }

    // optional sint32 multiplier = 5;
    if (has_multiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->multiplier());
    }

  }
  // repeated .ola.rdm.pid.LabeledValue label = 6;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->label(i));
  }

  // repeated .ola.rdm.pid.Range range = 7;
  total_size += 1 * this->range_size();
  for (int i = 0; i < this->range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range(i));
  }

  // repeated .ola.rdm.pid.Field field = 8;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  range_.MergeFrom(from.range_);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_min_size()) {
      set_min_size(from.min_size());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_multiplier()) {
      set_multiplier(from.multiplier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->label())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->range())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(min_size_, other->min_size_);
    std::swap(max_size_, other->max_size_);
    std::swap(multiplier_, other->multiplier_);
    label_.Swap(&other->label_);
    range_.Swap(&other->range_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameFormat::kFieldFieldNumber;
#endif  // !_MSC_VER

FrameFormat::FrameFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.FrameFormat)
}

void FrameFormat::InitAsDefaultInstance() {
}

FrameFormat::FrameFormat(const FrameFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.FrameFormat)
}

void FrameFormat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameFormat::~FrameFormat() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.FrameFormat)
  SharedDtor();
}

void FrameFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameFormat_descriptor_;
}

const FrameFormat& FrameFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

FrameFormat* FrameFormat::default_instance_ = NULL;

FrameFormat* FrameFormat::New() const {
  return new FrameFormat;
}

void FrameFormat::Clear() {
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.FrameFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.rdm.pid.Field field = 1;
      case 1: {
        if (tag == 10) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.FrameFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.FrameFormat)
  return false;
#undef DO_
}

void FrameFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.FrameFormat)
  // repeated .ola.rdm.pid.Field field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.FrameFormat)
}

::google::protobuf::uint8* FrameFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.FrameFormat)
  // repeated .ola.rdm.pid.Field field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.FrameFormat)
  return target;
}

int FrameFormat::ByteSize() const {
  int total_size = 0;

  // repeated .ola.rdm.pid.Field field = 1;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameFormat::MergeFrom(const FrameFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameFormat::CopyFrom(const FrameFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameFormat::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void FrameFormat::Swap(FrameFormat* other) {
  if (other != this) {
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameFormat_descriptor_;
  metadata.reflection = FrameFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pid::kNameFieldNumber;
const int Pid::kValueFieldNumber;
const int Pid::kGetRequestFieldNumber;
const int Pid::kGetResponseFieldNumber;
const int Pid::kSetRequestFieldNumber;
const int Pid::kSetResponseFieldNumber;
const int Pid::kGetSubDeviceRangeFieldNumber;
const int Pid::kSetSubDeviceRangeFieldNumber;
const int Pid::kDiscoveryRequestFieldNumber;
const int Pid::kDiscoveryResponseFieldNumber;
const int Pid::kDiscoverySubDeviceRangeFieldNumber;
#endif  // !_MSC_VER

Pid::Pid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.Pid)
}

void Pid::InitAsDefaultInstance() {
  get_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
  get_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
  set_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
  set_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
  discovery_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
  discovery_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(&::ola::rdm::pid::FrameFormat::default_instance());
}

Pid::Pid(const Pid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Pid)
}

void Pid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  get_request_ = NULL;
  get_response_ = NULL;
  set_request_ = NULL;
  set_response_ = NULL;
  get_sub_device_range_ = 1;
  set_sub_device_range_ = 1;
  discovery_request_ = NULL;
  discovery_response_ = NULL;
  discovery_sub_device_range_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pid::~Pid() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Pid)
  SharedDtor();
}

void Pid::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete get_request_;
    delete get_response_;
    delete set_request_;
    delete set_response_;
    delete discovery_request_;
    delete discovery_response_;
  }
}

void Pid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pid_descriptor_;
}

const Pid& Pid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

Pid* Pid::default_instance_ = NULL;

Pid* Pid::New() const {
  return new Pid;
}

void Pid::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    value_ = 0u;
    if (has_get_request()) {
      if (get_request_ != NULL) get_request_->::ola::rdm::pid::FrameFormat::Clear();
    }
    if (has_get_response()) {
      if (get_response_ != NULL) get_response_->::ola::rdm::pid::FrameFormat::Clear();
    }
    if (has_set_request()) {
      if (set_request_ != NULL) set_request_->::ola::rdm::pid::FrameFormat::Clear();
    }
    if (has_set_response()) {
      if (set_response_ != NULL) set_response_->::ola::rdm::pid::FrameFormat::Clear();
    }
    get_sub_device_range_ = 1;
    set_sub_device_range_ = 1;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_discovery_request()) {
      if (discovery_request_ != NULL) discovery_request_->::ola::rdm::pid::FrameFormat::Clear();
    }
    if (has_discovery_response()) {
      if (discovery_response_ != NULL) discovery_response_->::ola::rdm::pid::FrameFormat::Clear();
    }
    discovery_sub_device_range_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.Pid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_request;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat get_request = 3;
      case 3: {
        if (tag == 26) {
         parse_get_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_get_response;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat get_response = 4;
      case 4: {
        if (tag == 34) {
         parse_get_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_request;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat set_request = 5;
      case 5: {
        if (tag == 42) {
         parse_set_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_set_response;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat set_response = 6;
      case 6: {
        if (tag == 50) {
         parse_set_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_get_sub_device_range;
        break;
      }

      // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
      case 7: {
        if (tag == 56) {
         parse_get_sub_device_range:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::rdm::pid::SubDeviceRange_IsValid(value)) {
            set_get_sub_device_range(static_cast< ::ola::rdm::pid::SubDeviceRange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_set_sub_device_range;
        break;
      }

      // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
      case 8: {
        if (tag == 64) {
         parse_set_sub_device_range:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::rdm::pid::SubDeviceRange_IsValid(value)) {
            set_set_sub_device_range(static_cast< ::ola::rdm::pid::SubDeviceRange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_discovery_request;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
      case 9: {
        if (tag == 74) {
         parse_discovery_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discovery_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_discovery_response;
        break;
      }

      // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
      case 10: {
        if (tag == 82) {
         parse_discovery_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discovery_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_discovery_sub_device_range;
        break;
      }

      // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
      case 11: {
        if (tag == 88) {
         parse_discovery_sub_device_range:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::rdm::pid::SubDeviceRange_IsValid(value)) {
            set_discovery_sub_device_range(static_cast< ::ola::rdm::pid::SubDeviceRange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.Pid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.Pid)
  return false;
#undef DO_
}

void Pid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.Pid)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional .ola.rdm.pid.FrameFormat get_request = 3;
  if (has_get_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_request(), output);
  }

  // optional .ola.rdm.pid.FrameFormat get_response = 4;
  if (has_get_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_response(), output);
  }

  // optional .ola.rdm.pid.FrameFormat set_request = 5;
  if (has_set_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->set_request(), output);
  }

  // optional .ola.rdm.pid.FrameFormat set_response = 6;
  if (has_set_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->set_response(), output);
  }

  // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
  if (has_get_sub_device_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->get_sub_device_range(), output);
  }

  // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
  if (has_set_sub_device_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->set_sub_device_range(), output);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
  if (has_discovery_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->discovery_request(), output);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
  if (has_discovery_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->discovery_response(), output);
  }

  // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
  if (has_discovery_sub_device_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->discovery_sub_device_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.Pid)
}

::google::protobuf::uint8* Pid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Pid)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional .ola.rdm.pid.FrameFormat get_request = 3;
  if (has_get_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_request(), target);
  }

  // optional .ola.rdm.pid.FrameFormat get_response = 4;
  if (has_get_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_response(), target);
  }

  // optional .ola.rdm.pid.FrameFormat set_request = 5;
  if (has_set_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set_request(), target);
  }

  // optional .ola.rdm.pid.FrameFormat set_response = 6;
  if (has_set_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->set_response(), target);
  }

  // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
  if (has_get_sub_device_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->get_sub_device_range(), target);
  }

  // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
  if (has_set_sub_device_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->set_sub_device_range(), target);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
  if (has_discovery_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->discovery_request(), target);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
  if (has_discovery_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->discovery_response(), target);
  }

  // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
  if (has_discovery_sub_device_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->discovery_sub_device_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Pid)
  return target;
}

int Pid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional .ola.rdm.pid.FrameFormat get_request = 3;
    if (has_get_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_request());
    }

    // optional .ola.rdm.pid.FrameFormat get_response = 4;
    if (has_get_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_response());
    }

    // optional .ola.rdm.pid.FrameFormat set_request = 5;
    if (has_set_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_request());
    }

    // optional .ola.rdm.pid.FrameFormat set_response = 6;
    if (has_set_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_response());
    }

    // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
    if (has_get_sub_device_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_sub_device_range());
    }

    // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
    if (has_set_sub_device_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->set_sub_device_range());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
    if (has_discovery_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discovery_request());
    }

    // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
    if (has_discovery_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discovery_response());
    }

    // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
    if (has_discovery_sub_device_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discovery_sub_device_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pid::MergeFrom(const Pid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_get_request()) {
      mutable_get_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from.get_request());
    }
    if (from.has_get_response()) {
      mutable_get_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from.get_response());
    }
    if (from.has_set_request()) {
      mutable_set_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from.set_request());
    }
    if (from.has_set_response()) {
      mutable_set_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from.set_response());
    }
    if (from.has_get_sub_device_range()) {
      set_get_sub_device_range(from.get_sub_device_range());
    }
    if (from.has_set_sub_device_range()) {
      set_set_sub_device_range(from.set_sub_device_range());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_discovery_request()) {
      mutable_discovery_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from.discovery_request());
    }
    if (from.has_discovery_response()) {
      mutable_discovery_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from.discovery_response());
    }
    if (from.has_discovery_sub_device_range()) {
      set_discovery_sub_device_range(from.discovery_sub_device_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pid::CopyFrom(const Pid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_get_request()) {
    if (!this->get_request().IsInitialized()) return false;
  }
  if (has_get_response()) {
    if (!this->get_response().IsInitialized()) return false;
  }
  if (has_set_request()) {
    if (!this->set_request().IsInitialized()) return false;
  }
  if (has_set_response()) {
    if (!this->set_response().IsInitialized()) return false;
  }
  if (has_discovery_request()) {
    if (!this->discovery_request().IsInitialized()) return false;
  }
  if (has_discovery_response()) {
    if (!this->discovery_response().IsInitialized()) return false;
  }
  return true;
}

void Pid::Swap(Pid* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(get_request_, other->get_request_);
    std::swap(get_response_, other->get_response_);
    std::swap(set_request_, other->set_request_);
    std::swap(set_response_, other->set_response_);
    std::swap(get_sub_device_range_, other->get_sub_device_range_);
    std::swap(set_sub_device_range_, other->set_sub_device_range_);
    std::swap(discovery_request_, other->discovery_request_);
    std::swap(discovery_response_, other->discovery_response_);
    std::swap(discovery_sub_device_range_, other->discovery_sub_device_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pid_descriptor_;
  metadata.reflection = Pid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Manufacturer::kManufacturerIdFieldNumber;
const int Manufacturer::kManufacturerNameFieldNumber;
const int Manufacturer::kPidFieldNumber;
#endif  // !_MSC_VER

Manufacturer::Manufacturer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.Manufacturer)
}

void Manufacturer::InitAsDefaultInstance() {
}

Manufacturer::Manufacturer(const Manufacturer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Manufacturer)
}

void Manufacturer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  manufacturer_id_ = 0u;
  manufacturer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Manufacturer::~Manufacturer() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Manufacturer)
  SharedDtor();
}

void Manufacturer::SharedDtor() {
  if (manufacturer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_name_;
  }
  if (this != default_instance_) {
  }
}

void Manufacturer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Manufacturer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Manufacturer_descriptor_;
}

const Manufacturer& Manufacturer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

Manufacturer* Manufacturer::default_instance_ = NULL;

Manufacturer* Manufacturer::New() const {
  return new Manufacturer;
}

void Manufacturer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    manufacturer_id_ = 0u;
    if (has_manufacturer_name()) {
      if (manufacturer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufacturer_name_->clear();
      }
    }
  }
  pid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Manufacturer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.Manufacturer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 manufacturer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manufacturer_id_)));
          set_has_manufacturer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_manufacturer_name;
        break;
      }

      // required string manufacturer_name = 2;
      case 2: {
        if (tag == 18) {
         parse_manufacturer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer_name().data(), this->manufacturer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manufacturer_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pid;
        break;
      }

      // repeated .ola.rdm.pid.Pid pid = 3;
      case 3: {
        if (tag == 26) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.Manufacturer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.Manufacturer)
  return false;
#undef DO_
}

void Manufacturer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.Manufacturer)
  // required uint32 manufacturer_id = 1;
  if (has_manufacturer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manufacturer_id(), output);
  }

  // required string manufacturer_name = 2;
  if (has_manufacturer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_name().data(), this->manufacturer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer_name(), output);
  }

  // repeated .ola.rdm.pid.Pid pid = 3;
  for (int i = 0; i < this->pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.Manufacturer)
}

::google::protobuf::uint8* Manufacturer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Manufacturer)
  // required uint32 manufacturer_id = 1;
  if (has_manufacturer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manufacturer_id(), target);
  }

  // required string manufacturer_name = 2;
  if (has_manufacturer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_name().data(), this->manufacturer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->manufacturer_name(), target);
  }

  // repeated .ola.rdm.pid.Pid pid = 3;
  for (int i = 0; i < this->pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Manufacturer)
  return target;
}

int Manufacturer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 manufacturer_id = 1;
    if (has_manufacturer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manufacturer_id());
    }

    // required string manufacturer_name = 2;
    if (has_manufacturer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer_name());
    }

  }
  // repeated .ola.rdm.pid.Pid pid = 3;
  total_size += 1 * this->pid_size();
  for (int i = 0; i < this->pid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Manufacturer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Manufacturer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Manufacturer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Manufacturer::MergeFrom(const Manufacturer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pid_.MergeFrom(from.pid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manufacturer_id()) {
      set_manufacturer_id(from.manufacturer_id());
    }
    if (from.has_manufacturer_name()) {
      set_manufacturer_name(from.manufacturer_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Manufacturer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Manufacturer::CopyFrom(const Manufacturer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Manufacturer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pid())) return false;
  return true;
}

void Manufacturer::Swap(Manufacturer* other) {
  if (other != this) {
    std::swap(manufacturer_id_, other->manufacturer_id_);
    std::swap(manufacturer_name_, other->manufacturer_name_);
    pid_.Swap(&other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Manufacturer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Manufacturer_descriptor_;
  metadata.reflection = Manufacturer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PidStore::kPidFieldNumber;
const int PidStore::kManufacturerFieldNumber;
const int PidStore::kVersionFieldNumber;
#endif  // !_MSC_VER

PidStore::PidStore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.rdm.pid.PidStore)
}

void PidStore::InitAsDefaultInstance() {
}

PidStore::PidStore(const PidStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.PidStore)
}

void PidStore::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PidStore::~PidStore() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.PidStore)
  SharedDtor();
}

void PidStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PidStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PidStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PidStore_descriptor_;
}

const PidStore& PidStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pids_2eproto();
  return *default_instance_;
}

PidStore* PidStore::default_instance_ = NULL;

PidStore* PidStore::New() const {
  return new PidStore;
}

void PidStore::Clear() {
  version_ = GOOGLE_ULONGLONG(0);
  pid_.Clear();
  manufacturer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PidStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.rdm.pid.PidStore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.rdm.pid.Pid pid = 1;
      case 1: {
        if (tag == 10) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pid;
        if (input->ExpectTag(18)) goto parse_manufacturer;
        break;
      }

      // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
      case 2: {
        if (tag == 18) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manufacturer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_manufacturer;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.rdm.pid.PidStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.rdm.pid.PidStore)
  return false;
#undef DO_
}

void PidStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.rdm.pid.PidStore)
  // repeated .ola.rdm.pid.Pid pid = 1;
  for (int i = 0; i < this->pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pid(i), output);
  }

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  for (int i = 0; i < this->manufacturer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->manufacturer(i), output);
  }

  // required uint64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.rdm.pid.PidStore)
}

::google::protobuf::uint8* PidStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.PidStore)
  // repeated .ola.rdm.pid.Pid pid = 1;
  for (int i = 0; i < this->pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pid(i), target);
  }

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  for (int i = 0; i < this->manufacturer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->manufacturer(i), target);
  }

  // required uint64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.PidStore)
  return target;
}

int PidStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  // repeated .ola.rdm.pid.Pid pid = 1;
  total_size += 1 * this->pid_size();
  for (int i = 0; i < this->pid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pid(i));
  }

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  total_size += 1 * this->manufacturer_size();
  for (int i = 0; i < this->manufacturer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manufacturer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PidStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PidStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PidStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PidStore::MergeFrom(const PidStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  pid_.MergeFrom(from.pid_);
  manufacturer_.MergeFrom(from.manufacturer_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PidStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidStore::CopyFrom(const PidStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pid())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->manufacturer())) return false;
  return true;
}

void PidStore::Swap(PidStore* other) {
  if (other != this) {
    pid_.Swap(&other->pid_);
    manufacturer_.Swap(&other->manufacturer_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PidStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PidStore_descriptor_;
  metadata.reflection = PidStore_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pid
}  // namespace rdm
}  // namespace ola

// @@protoc_insertion_point(global_scope)
