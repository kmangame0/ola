// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pids.proto

#ifndef PROTOBUF_Pids_2eproto__INCLUDED
#define PROTOBUF_Pids_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ola {
namespace rdm {
namespace pid {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pids_2eproto();
void protobuf_AssignDesc_Pids_2eproto();
void protobuf_ShutdownFile_Pids_2eproto();

class LabeledValue;
class Range;
class Field;
class FrameFormat;
class Pid;
class Manufacturer;
class PidStore;

enum SubDeviceRange {
  ROOT_DEVICE = 1,
  ROOT_OR_ALL_SUBDEVICE = 2,
  ROOT_OR_SUBDEVICE = 3,
  ONLY_SUBDEVICES = 4
};
bool SubDeviceRange_IsValid(int value);
const SubDeviceRange SubDeviceRange_MIN = ROOT_DEVICE;
const SubDeviceRange SubDeviceRange_MAX = ONLY_SUBDEVICES;
const int SubDeviceRange_ARRAYSIZE = SubDeviceRange_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubDeviceRange_descriptor();
inline const ::std::string& SubDeviceRange_Name(SubDeviceRange value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubDeviceRange_descriptor(), value);
}
inline bool SubDeviceRange_Parse(
    const ::std::string& name, SubDeviceRange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubDeviceRange>(
    SubDeviceRange_descriptor(), name, value);
}
enum FieldType {
  BOOL = 1,
  UINT8 = 2,
  UINT16 = 3,
  UINT32 = 4,
  STRING = 5,
  GROUP = 6,
  INT8 = 7,
  INT16 = 8,
  INT32 = 9,
  IPV4 = 10,
  UID = 11,
  MAC = 12
};
bool FieldType_IsValid(int value);
const FieldType FieldType_MIN = BOOL;
const FieldType FieldType_MAX = MAC;
const int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldType_descriptor();
inline const ::std::string& FieldType_Name(FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldType_descriptor(), value);
}
inline bool FieldType_Parse(
    const ::std::string& name, FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
// ===================================================================

class LabeledValue : public ::google::protobuf::Message {
 public:
  LabeledValue();
  virtual ~LabeledValue();

  LabeledValue(const LabeledValue& from);

  inline LabeledValue& operator=(const LabeledValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabeledValue& default_instance();

  void Swap(LabeledValue* other);

  // implements Message ----------------------------------------------

  LabeledValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabeledValue& from);
  void MergeFrom(const LabeledValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // required string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.LabeledValue)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  ::std::string* label_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static LabeledValue* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline ::google::protobuf::int64 min() const;
  inline void set_min(::google::protobuf::int64 value);

  // required int64 max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline ::google::protobuf::int64 max() const;
  inline void set_max(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Range)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 min_;
  ::google::protobuf::int64 max_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ola.rdm.pid.FieldType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ola::rdm::pid::FieldType type() const;
  inline void set_type(::ola::rdm::pid::FieldType value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 min_size = 3;
  inline bool has_min_size() const;
  inline void clear_min_size();
  static const int kMinSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 min_size() const;
  inline void set_min_size(::google::protobuf::uint32 value);

  // optional uint32 max_size = 4;
  inline bool has_max_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_size() const;
  inline void set_max_size(::google::protobuf::uint32 value);

  // optional sint32 multiplier = 5;
  inline bool has_multiplier() const;
  inline void clear_multiplier();
  static const int kMultiplierFieldNumber = 5;
  inline ::google::protobuf::int32 multiplier() const;
  inline void set_multiplier(::google::protobuf::int32 value);

  // repeated .ola.rdm.pid.LabeledValue label = 6;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 6;
  inline const ::ola::rdm::pid::LabeledValue& label(int index) const;
  inline ::ola::rdm::pid::LabeledValue* mutable_label(int index);
  inline ::ola::rdm::pid::LabeledValue* add_label();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >&
      label() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >*
      mutable_label();

  // repeated .ola.rdm.pid.Range range = 7;
  inline int range_size() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 7;
  inline const ::ola::rdm::pid::Range& range(int index) const;
  inline ::ola::rdm::pid::Range* mutable_range(int index);
  inline ::ola::rdm::pid::Range* add_range();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Range >&
      range() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Range >*
      mutable_range();

  // repeated .ola.rdm.pid.Field field = 8;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 8;
  inline const ::ola::rdm::pid::Field& field(int index) const;
  inline ::ola::rdm::pid::Field* mutable_field(int index);
  inline ::ola::rdm::pid::Field* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Field)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_min_size();
  inline void clear_has_min_size();
  inline void set_has_max_size();
  inline void clear_has_max_size();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 min_size_;
  ::google::protobuf::uint32 max_size_;
  ::google::protobuf::int32 multiplier_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::LabeledValue > label_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Range > range_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field > field_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class FrameFormat : public ::google::protobuf::Message {
 public:
  FrameFormat();
  virtual ~FrameFormat();

  FrameFormat(const FrameFormat& from);

  inline FrameFormat& operator=(const FrameFormat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameFormat& default_instance();

  void Swap(FrameFormat* other);

  // implements Message ----------------------------------------------

  FrameFormat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameFormat& from);
  void MergeFrom(const FrameFormat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ola.rdm.pid.Field field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::ola::rdm::pid::Field& field(int index) const;
  inline ::ola::rdm::pid::Field* mutable_field(int index);
  inline ::ola::rdm::pid::Field* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.FrameFormat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field > field_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static FrameFormat* default_instance_;
};
// -------------------------------------------------------------------

class Pid : public ::google::protobuf::Message {
 public:
  Pid();
  virtual ~Pid();

  Pid(const Pid& from);

  inline Pid& operator=(const Pid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pid& default_instance();

  void Swap(Pid* other);

  // implements Message ----------------------------------------------

  Pid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pid& from);
  void MergeFrom(const Pid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional .ola.rdm.pid.FrameFormat get_request = 3;
  inline bool has_get_request() const;
  inline void clear_get_request();
  static const int kGetRequestFieldNumber = 3;
  inline const ::ola::rdm::pid::FrameFormat& get_request() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_get_request();
  inline ::ola::rdm::pid::FrameFormat* release_get_request();
  inline void set_allocated_get_request(::ola::rdm::pid::FrameFormat* get_request);

  // optional .ola.rdm.pid.FrameFormat get_response = 4;
  inline bool has_get_response() const;
  inline void clear_get_response();
  static const int kGetResponseFieldNumber = 4;
  inline const ::ola::rdm::pid::FrameFormat& get_response() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_get_response();
  inline ::ola::rdm::pid::FrameFormat* release_get_response();
  inline void set_allocated_get_response(::ola::rdm::pid::FrameFormat* get_response);

  // optional .ola.rdm.pid.FrameFormat set_request = 5;
  inline bool has_set_request() const;
  inline void clear_set_request();
  static const int kSetRequestFieldNumber = 5;
  inline const ::ola::rdm::pid::FrameFormat& set_request() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_set_request();
  inline ::ola::rdm::pid::FrameFormat* release_set_request();
  inline void set_allocated_set_request(::ola::rdm::pid::FrameFormat* set_request);

  // optional .ola.rdm.pid.FrameFormat set_response = 6;
  inline bool has_set_response() const;
  inline void clear_set_response();
  static const int kSetResponseFieldNumber = 6;
  inline const ::ola::rdm::pid::FrameFormat& set_response() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_set_response();
  inline ::ola::rdm::pid::FrameFormat* release_set_response();
  inline void set_allocated_set_response(::ola::rdm::pid::FrameFormat* set_response);

  // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
  inline bool has_get_sub_device_range() const;
  inline void clear_get_sub_device_range();
  static const int kGetSubDeviceRangeFieldNumber = 7;
  inline ::ola::rdm::pid::SubDeviceRange get_sub_device_range() const;
  inline void set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value);

  // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
  inline bool has_set_sub_device_range() const;
  inline void clear_set_sub_device_range();
  static const int kSetSubDeviceRangeFieldNumber = 8;
  inline ::ola::rdm::pid::SubDeviceRange set_sub_device_range() const;
  inline void set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value);

  // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
  inline bool has_discovery_request() const;
  inline void clear_discovery_request();
  static const int kDiscoveryRequestFieldNumber = 9;
  inline const ::ola::rdm::pid::FrameFormat& discovery_request() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_discovery_request();
  inline ::ola::rdm::pid::FrameFormat* release_discovery_request();
  inline void set_allocated_discovery_request(::ola::rdm::pid::FrameFormat* discovery_request);

  // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
  inline bool has_discovery_response() const;
  inline void clear_discovery_response();
  static const int kDiscoveryResponseFieldNumber = 10;
  inline const ::ola::rdm::pid::FrameFormat& discovery_response() const;
  inline ::ola::rdm::pid::FrameFormat* mutable_discovery_response();
  inline ::ola::rdm::pid::FrameFormat* release_discovery_response();
  inline void set_allocated_discovery_response(::ola::rdm::pid::FrameFormat* discovery_response);

  // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
  inline bool has_discovery_sub_device_range() const;
  inline void clear_discovery_sub_device_range();
  static const int kDiscoverySubDeviceRangeFieldNumber = 11;
  inline ::ola::rdm::pid::SubDeviceRange discovery_sub_device_range() const;
  inline void set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value);

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Pid)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_get_request();
  inline void clear_has_get_request();
  inline void set_has_get_response();
  inline void clear_has_get_response();
  inline void set_has_set_request();
  inline void clear_has_set_request();
  inline void set_has_set_response();
  inline void clear_has_set_response();
  inline void set_has_get_sub_device_range();
  inline void clear_has_get_sub_device_range();
  inline void set_has_set_sub_device_range();
  inline void clear_has_set_sub_device_range();
  inline void set_has_discovery_request();
  inline void clear_has_discovery_request();
  inline void set_has_discovery_response();
  inline void clear_has_discovery_response();
  inline void set_has_discovery_sub_device_range();
  inline void clear_has_discovery_sub_device_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::ola::rdm::pid::FrameFormat* get_request_;
  ::ola::rdm::pid::FrameFormat* get_response_;
  ::google::protobuf::uint32 value_;
  int get_sub_device_range_;
  ::ola::rdm::pid::FrameFormat* set_request_;
  ::ola::rdm::pid::FrameFormat* set_response_;
  ::ola::rdm::pid::FrameFormat* discovery_request_;
  int set_sub_device_range_;
  int discovery_sub_device_range_;
  ::ola::rdm::pid::FrameFormat* discovery_response_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static Pid* default_instance_;
};
// -------------------------------------------------------------------

class Manufacturer : public ::google::protobuf::Message {
 public:
  Manufacturer();
  virtual ~Manufacturer();

  Manufacturer(const Manufacturer& from);

  inline Manufacturer& operator=(const Manufacturer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Manufacturer& default_instance();

  void Swap(Manufacturer* other);

  // implements Message ----------------------------------------------

  Manufacturer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Manufacturer& from);
  void MergeFrom(const Manufacturer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 manufacturer_id = 1;
  inline bool has_manufacturer_id() const;
  inline void clear_manufacturer_id();
  static const int kManufacturerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 manufacturer_id() const;
  inline void set_manufacturer_id(::google::protobuf::uint32 value);

  // required string manufacturer_name = 2;
  inline bool has_manufacturer_name() const;
  inline void clear_manufacturer_name();
  static const int kManufacturerNameFieldNumber = 2;
  inline const ::std::string& manufacturer_name() const;
  inline void set_manufacturer_name(const ::std::string& value);
  inline void set_manufacturer_name(const char* value);
  inline void set_manufacturer_name(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer_name();
  inline ::std::string* release_manufacturer_name();
  inline void set_allocated_manufacturer_name(::std::string* manufacturer_name);

  // repeated .ola.rdm.pid.Pid pid = 3;
  inline int pid_size() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline const ::ola::rdm::pid::Pid& pid(int index) const;
  inline ::ola::rdm::pid::Pid* mutable_pid(int index);
  inline ::ola::rdm::pid::Pid* add_pid();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >&
      pid() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >*
      mutable_pid();

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Manufacturer)
 private:
  inline void set_has_manufacturer_id();
  inline void clear_has_manufacturer_id();
  inline void set_has_manufacturer_name();
  inline void clear_has_manufacturer_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* manufacturer_name_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid > pid_;
  ::google::protobuf::uint32 manufacturer_id_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static Manufacturer* default_instance_;
};
// -------------------------------------------------------------------

class PidStore : public ::google::protobuf::Message {
 public:
  PidStore();
  virtual ~PidStore();

  PidStore(const PidStore& from);

  inline PidStore& operator=(const PidStore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PidStore& default_instance();

  void Swap(PidStore* other);

  // implements Message ----------------------------------------------

  PidStore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PidStore& from);
  void MergeFrom(const PidStore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ola.rdm.pid.Pid pid = 1;
  inline int pid_size() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline const ::ola::rdm::pid::Pid& pid(int index) const;
  inline ::ola::rdm::pid::Pid* mutable_pid(int index);
  inline ::ola::rdm::pid::Pid* add_pid();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >&
      pid() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >*
      mutable_pid();

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  inline int manufacturer_size() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 2;
  inline const ::ola::rdm::pid::Manufacturer& manufacturer(int index) const;
  inline ::ola::rdm::pid::Manufacturer* mutable_manufacturer(int index);
  inline ::ola::rdm::pid::Manufacturer* add_manufacturer();
  inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >&
      manufacturer() const;
  inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >*
      mutable_manufacturer();

  // required uint64 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.PidStore)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid > pid_;
  ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Manufacturer > manufacturer_;
  ::google::protobuf::uint64 version_;
  friend void  protobuf_AddDesc_Pids_2eproto();
  friend void protobuf_AssignDesc_Pids_2eproto();
  friend void protobuf_ShutdownFile_Pids_2eproto();

  void InitAsDefaultInstance();
  static PidStore* default_instance_;
};
// ===================================================================


// ===================================================================

// LabeledValue

// required int64 value = 1;
inline bool LabeledValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabeledValue::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabeledValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabeledValue::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 LabeledValue::value() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.LabeledValue.value)
  return value_;
}
inline void LabeledValue::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.LabeledValue.value)
}

// required string label = 2;
inline bool LabeledValue::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabeledValue::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabeledValue::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabeledValue::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& LabeledValue::label() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.LabeledValue.label)
  return *label_;
}
inline void LabeledValue::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.LabeledValue.label)
}
inline void LabeledValue::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.LabeledValue.label)
}
inline void LabeledValue::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.LabeledValue.label)
}
inline ::std::string* LabeledValue::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.LabeledValue.label)
  return label_;
}
inline ::std::string* LabeledValue::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabeledValue::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.LabeledValue.label)
}

// -------------------------------------------------------------------

// Range

// required int64 min = 1;
inline bool Range::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_min() {
  min_ = GOOGLE_LONGLONG(0);
  clear_has_min();
}
inline ::google::protobuf::int64 Range::min() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Range.min)
  return min_;
}
inline void Range::set_min(::google::protobuf::int64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Range.min)
}

// required int64 max = 2;
inline bool Range::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_max() {
  max_ = GOOGLE_LONGLONG(0);
  clear_has_max();
}
inline ::google::protobuf::int64 Range::max() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Range.max)
  return max_;
}
inline void Range::set_max(::google::protobuf::int64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Range.max)
}

// -------------------------------------------------------------------

// Field

// required .ola.rdm.pid.FieldType type = 1;
inline bool Field::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ola::rdm::pid::FieldType Field::type() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.type)
  return static_cast< ::ola::rdm::pid::FieldType >(type_);
}
inline void Field::set_type(::ola::rdm::pid::FieldType value) {
  assert(::ola::rdm::pid::FieldType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.type)
}

// required string name = 2;
inline bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Field::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Field::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.name)
  return *name_;
}
inline void Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.name)
}
inline void Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Field.name)
}
inline ::std::string* Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.name)
  return name_;
}
inline ::std::string* Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Field::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Field.name)
}

// optional uint32 min_size = 3;
inline bool Field::has_min_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Field::set_has_min_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Field::clear_has_min_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Field::clear_min_size() {
  min_size_ = 0u;
  clear_has_min_size();
}
inline ::google::protobuf::uint32 Field::min_size() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.min_size)
  return min_size_;
}
inline void Field::set_min_size(::google::protobuf::uint32 value) {
  set_has_min_size();
  min_size_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.min_size)
}

// optional uint32 max_size = 4;
inline bool Field::has_max_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Field::set_has_max_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Field::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Field::clear_max_size() {
  max_size_ = 0u;
  clear_has_max_size();
}
inline ::google::protobuf::uint32 Field::max_size() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.max_size)
  return max_size_;
}
inline void Field::set_max_size(::google::protobuf::uint32 value) {
  set_has_max_size();
  max_size_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.max_size)
}

// optional sint32 multiplier = 5;
inline bool Field::has_multiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Field::set_has_multiplier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Field::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Field::clear_multiplier() {
  multiplier_ = 0;
  clear_has_multiplier();
}
inline ::google::protobuf::int32 Field::multiplier() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.multiplier)
  return multiplier_;
}
inline void Field::set_multiplier(::google::protobuf::int32 value) {
  set_has_multiplier();
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.multiplier)
}

// repeated .ola.rdm.pid.LabeledValue label = 6;
inline int Field::label_size() const {
  return label_.size();
}
inline void Field::clear_label() {
  label_.Clear();
}
inline const ::ola::rdm::pid::LabeledValue& Field::label(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.label)
  return label_.Get(index);
}
inline ::ola::rdm::pid::LabeledValue* Field::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.label)
  return label_.Mutable(index);
}
inline ::ola::rdm::pid::LabeledValue* Field::add_label() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.label)
  return label_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >&
Field::label() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.label)
  return label_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >*
Field::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.label)
  return &label_;
}

// repeated .ola.rdm.pid.Range range = 7;
inline int Field::range_size() const {
  return range_.size();
}
inline void Field::clear_range() {
  range_.Clear();
}
inline const ::ola::rdm::pid::Range& Field::range(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.range)
  return range_.Get(index);
}
inline ::ola::rdm::pid::Range* Field::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.range)
  return range_.Mutable(index);
}
inline ::ola::rdm::pid::Range* Field::add_range() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.range)
  return range_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Range >&
Field::range() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.range)
  return range_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Range >*
Field::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.range)
  return &range_;
}

// repeated .ola.rdm.pid.Field field = 8;
inline int Field::field_size() const {
  return field_.size();
}
inline void Field::clear_field() {
  field_.Clear();
}
inline const ::ola::rdm::pid::Field& Field::field(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.field)
  return field_.Get(index);
}
inline ::ola::rdm::pid::Field* Field::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.field)
  return field_.Mutable(index);
}
inline ::ola::rdm::pid::Field* Field::add_field() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >&
Field::field() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >*
Field::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.field)
  return &field_;
}

// -------------------------------------------------------------------

// FrameFormat

// repeated .ola.rdm.pid.Field field = 1;
inline int FrameFormat::field_size() const {
  return field_.size();
}
inline void FrameFormat::clear_field() {
  field_.Clear();
}
inline const ::ola::rdm::pid::Field& FrameFormat::field(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.FrameFormat.field)
  return field_.Get(index);
}
inline ::ola::rdm::pid::Field* FrameFormat::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.FrameFormat.field)
  return field_.Mutable(index);
}
inline ::ola::rdm::pid::Field* FrameFormat::add_field() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.FrameFormat.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >&
FrameFormat::field() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.FrameFormat.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Field >*
FrameFormat::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.FrameFormat.field)
  return &field_;
}

// -------------------------------------------------------------------

// Pid

// required string name = 1;
inline bool Pid::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pid::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pid::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pid::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Pid::name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.name)
  return *name_;
}
inline void Pid::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.name)
}
inline void Pid::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Pid.name)
}
inline void Pid::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Pid.name)
}
inline ::std::string* Pid::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.name)
  return name_;
}
inline ::std::string* Pid::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pid::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.name)
}

// required uint32 value = 2;
inline bool Pid::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pid::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pid::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pid::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Pid::value() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.value)
  return value_;
}
inline void Pid::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.value)
}

// optional .ola.rdm.pid.FrameFormat get_request = 3;
inline bool Pid::has_get_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pid::set_has_get_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pid::clear_has_get_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pid::clear_get_request() {
  if (get_request_ != NULL) get_request_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_get_request();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::get_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_request)
  return get_request_ != NULL ? *get_request_ : *default_instance_->get_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_get_request() {
  set_has_get_request();
  if (get_request_ == NULL) get_request_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.get_request)
  return get_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_get_request() {
  clear_has_get_request();
  ::ola::rdm::pid::FrameFormat* temp = get_request_;
  get_request_ = NULL;
  return temp;
}
inline void Pid::set_allocated_get_request(::ola::rdm::pid::FrameFormat* get_request) {
  delete get_request_;
  get_request_ = get_request;
  if (get_request) {
    set_has_get_request();
  } else {
    clear_has_get_request();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.get_request)
}

// optional .ola.rdm.pid.FrameFormat get_response = 4;
inline bool Pid::has_get_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pid::set_has_get_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pid::clear_has_get_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pid::clear_get_response() {
  if (get_response_ != NULL) get_response_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_get_response();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::get_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_response)
  return get_response_ != NULL ? *get_response_ : *default_instance_->get_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_get_response() {
  set_has_get_response();
  if (get_response_ == NULL) get_response_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.get_response)
  return get_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_get_response() {
  clear_has_get_response();
  ::ola::rdm::pid::FrameFormat* temp = get_response_;
  get_response_ = NULL;
  return temp;
}
inline void Pid::set_allocated_get_response(::ola::rdm::pid::FrameFormat* get_response) {
  delete get_response_;
  get_response_ = get_response;
  if (get_response) {
    set_has_get_response();
  } else {
    clear_has_get_response();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.get_response)
}

// optional .ola.rdm.pid.FrameFormat set_request = 5;
inline bool Pid::has_set_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pid::set_has_set_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pid::clear_has_set_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pid::clear_set_request() {
  if (set_request_ != NULL) set_request_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_set_request();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::set_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_request)
  return set_request_ != NULL ? *set_request_ : *default_instance_->set_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_set_request() {
  set_has_set_request();
  if (set_request_ == NULL) set_request_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.set_request)
  return set_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_set_request() {
  clear_has_set_request();
  ::ola::rdm::pid::FrameFormat* temp = set_request_;
  set_request_ = NULL;
  return temp;
}
inline void Pid::set_allocated_set_request(::ola::rdm::pid::FrameFormat* set_request) {
  delete set_request_;
  set_request_ = set_request;
  if (set_request) {
    set_has_set_request();
  } else {
    clear_has_set_request();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.set_request)
}

// optional .ola.rdm.pid.FrameFormat set_response = 6;
inline bool Pid::has_set_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pid::set_has_set_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pid::clear_has_set_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pid::clear_set_response() {
  if (set_response_ != NULL) set_response_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_set_response();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::set_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_response)
  return set_response_ != NULL ? *set_response_ : *default_instance_->set_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_set_response() {
  set_has_set_response();
  if (set_response_ == NULL) set_response_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.set_response)
  return set_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_set_response() {
  clear_has_set_response();
  ::ola::rdm::pid::FrameFormat* temp = set_response_;
  set_response_ = NULL;
  return temp;
}
inline void Pid::set_allocated_set_response(::ola::rdm::pid::FrameFormat* set_response) {
  delete set_response_;
  set_response_ = set_response;
  if (set_response) {
    set_has_set_response();
  } else {
    clear_has_set_response();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.set_response)
}

// optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
inline bool Pid::has_get_sub_device_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pid::set_has_get_sub_device_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pid::clear_has_get_sub_device_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pid::clear_get_sub_device_range() {
  get_sub_device_range_ = 1;
  clear_has_get_sub_device_range();
}
inline ::ola::rdm::pid::SubDeviceRange Pid::get_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_sub_device_range)
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(get_sub_device_range_);
}
inline void Pid::set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  set_has_get_sub_device_range();
  get_sub_device_range_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.get_sub_device_range)
}

// optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
inline bool Pid::has_set_sub_device_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pid::set_has_set_sub_device_range() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pid::clear_has_set_sub_device_range() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pid::clear_set_sub_device_range() {
  set_sub_device_range_ = 1;
  clear_has_set_sub_device_range();
}
inline ::ola::rdm::pid::SubDeviceRange Pid::set_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_sub_device_range)
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(set_sub_device_range_);
}
inline void Pid::set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  set_has_set_sub_device_range();
  set_sub_device_range_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.set_sub_device_range)
}

// optional .ola.rdm.pid.FrameFormat discovery_request = 9;
inline bool Pid::has_discovery_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pid::set_has_discovery_request() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pid::clear_has_discovery_request() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pid::clear_discovery_request() {
  if (discovery_request_ != NULL) discovery_request_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_discovery_request();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::discovery_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_request)
  return discovery_request_ != NULL ? *discovery_request_ : *default_instance_->discovery_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_discovery_request() {
  set_has_discovery_request();
  if (discovery_request_ == NULL) discovery_request_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.discovery_request)
  return discovery_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_discovery_request() {
  clear_has_discovery_request();
  ::ola::rdm::pid::FrameFormat* temp = discovery_request_;
  discovery_request_ = NULL;
  return temp;
}
inline void Pid::set_allocated_discovery_request(::ola::rdm::pid::FrameFormat* discovery_request) {
  delete discovery_request_;
  discovery_request_ = discovery_request;
  if (discovery_request) {
    set_has_discovery_request();
  } else {
    clear_has_discovery_request();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.discovery_request)
}

// optional .ola.rdm.pid.FrameFormat discovery_response = 10;
inline bool Pid::has_discovery_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Pid::set_has_discovery_response() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Pid::clear_has_discovery_response() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Pid::clear_discovery_response() {
  if (discovery_response_ != NULL) discovery_response_->::ola::rdm::pid::FrameFormat::Clear();
  clear_has_discovery_response();
}
inline const ::ola::rdm::pid::FrameFormat& Pid::discovery_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_response)
  return discovery_response_ != NULL ? *discovery_response_ : *default_instance_->discovery_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_discovery_response() {
  set_has_discovery_response();
  if (discovery_response_ == NULL) discovery_response_ = new ::ola::rdm::pid::FrameFormat;
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.discovery_response)
  return discovery_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_discovery_response() {
  clear_has_discovery_response();
  ::ola::rdm::pid::FrameFormat* temp = discovery_response_;
  discovery_response_ = NULL;
  return temp;
}
inline void Pid::set_allocated_discovery_response(::ola::rdm::pid::FrameFormat* discovery_response) {
  delete discovery_response_;
  discovery_response_ = discovery_response;
  if (discovery_response) {
    set_has_discovery_response();
  } else {
    clear_has_discovery_response();
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.discovery_response)
}

// optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
inline bool Pid::has_discovery_sub_device_range() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Pid::set_has_discovery_sub_device_range() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Pid::clear_has_discovery_sub_device_range() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Pid::clear_discovery_sub_device_range() {
  discovery_sub_device_range_ = 1;
  clear_has_discovery_sub_device_range();
}
inline ::ola::rdm::pid::SubDeviceRange Pid::discovery_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_sub_device_range)
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(discovery_sub_device_range_);
}
inline void Pid::set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  set_has_discovery_sub_device_range();
  discovery_sub_device_range_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.discovery_sub_device_range)
}

// -------------------------------------------------------------------

// Manufacturer

// required uint32 manufacturer_id = 1;
inline bool Manufacturer::has_manufacturer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Manufacturer::set_has_manufacturer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Manufacturer::clear_has_manufacturer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Manufacturer::clear_manufacturer_id() {
  manufacturer_id_ = 0u;
  clear_has_manufacturer_id();
}
inline ::google::protobuf::uint32 Manufacturer::manufacturer_id() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.manufacturer_id)
  return manufacturer_id_;
}
inline void Manufacturer::set_manufacturer_id(::google::protobuf::uint32 value) {
  set_has_manufacturer_id();
  manufacturer_id_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Manufacturer.manufacturer_id)
}

// required string manufacturer_name = 2;
inline bool Manufacturer::has_manufacturer_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Manufacturer::set_has_manufacturer_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Manufacturer::clear_has_manufacturer_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Manufacturer::clear_manufacturer_name() {
  if (manufacturer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_name_->clear();
  }
  clear_has_manufacturer_name();
}
inline const ::std::string& Manufacturer::manufacturer_name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.manufacturer_name)
  return *manufacturer_name_;
}
inline void Manufacturer::set_manufacturer_name(const ::std::string& value) {
  set_has_manufacturer_name();
  if (manufacturer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_name_ = new ::std::string;
  }
  manufacturer_name_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline void Manufacturer::set_manufacturer_name(const char* value) {
  set_has_manufacturer_name();
  if (manufacturer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_name_ = new ::std::string;
  }
  manufacturer_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline void Manufacturer::set_manufacturer_name(const char* value, size_t size) {
  set_has_manufacturer_name();
  if (manufacturer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_name_ = new ::std::string;
  }
  manufacturer_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline ::std::string* Manufacturer::mutable_manufacturer_name() {
  set_has_manufacturer_name();
  if (manufacturer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Manufacturer.manufacturer_name)
  return manufacturer_name_;
}
inline ::std::string* Manufacturer::release_manufacturer_name() {
  clear_has_manufacturer_name();
  if (manufacturer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manufacturer_name_;
    manufacturer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Manufacturer::set_allocated_manufacturer_name(::std::string* manufacturer_name) {
  if (manufacturer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_name_;
  }
  if (manufacturer_name) {
    set_has_manufacturer_name();
    manufacturer_name_ = manufacturer_name;
  } else {
    clear_has_manufacturer_name();
    manufacturer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Manufacturer.manufacturer_name)
}

// repeated .ola.rdm.pid.Pid pid = 3;
inline int Manufacturer::pid_size() const {
  return pid_.size();
}
inline void Manufacturer::clear_pid() {
  pid_.Clear();
}
inline const ::ola::rdm::pid::Pid& Manufacturer::pid(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.pid)
  return pid_.Get(index);
}
inline ::ola::rdm::pid::Pid* Manufacturer::mutable_pid(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Manufacturer.pid)
  return pid_.Mutable(index);
}
inline ::ola::rdm::pid::Pid* Manufacturer::add_pid() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Manufacturer.pid)
  return pid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >&
Manufacturer::pid() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Manufacturer.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >*
Manufacturer::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Manufacturer.pid)
  return &pid_;
}

// -------------------------------------------------------------------

// PidStore

// repeated .ola.rdm.pid.Pid pid = 1;
inline int PidStore::pid_size() const {
  return pid_.size();
}
inline void PidStore::clear_pid() {
  pid_.Clear();
}
inline const ::ola::rdm::pid::Pid& PidStore::pid(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.pid)
  return pid_.Get(index);
}
inline ::ola::rdm::pid::Pid* PidStore::mutable_pid(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.PidStore.pid)
  return pid_.Mutable(index);
}
inline ::ola::rdm::pid::Pid* PidStore::add_pid() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.PidStore.pid)
  return pid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >&
PidStore::pid() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.PidStore.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Pid >*
PidStore::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.PidStore.pid)
  return &pid_;
}

// repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
inline int PidStore::manufacturer_size() const {
  return manufacturer_.size();
}
inline void PidStore::clear_manufacturer() {
  manufacturer_.Clear();
}
inline const ::ola::rdm::pid::Manufacturer& PidStore::manufacturer(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_.Get(index);
}
inline ::ola::rdm::pid::Manufacturer* PidStore::mutable_manufacturer(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_.Mutable(index);
}
inline ::ola::rdm::pid::Manufacturer* PidStore::add_manufacturer() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >&
PidStore::manufacturer() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_;
}
inline ::google::protobuf::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >*
PidStore::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.PidStore.manufacturer)
  return &manufacturer_;
}

// required uint64 version = 3;
inline bool PidStore::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PidStore::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PidStore::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PidStore::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 PidStore::version() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.version)
  return version_;
}
inline void PidStore::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:ola.rdm.pid.PidStore.version)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pid
}  // namespace rdm
}  // namespace ola

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ola::rdm::pid::SubDeviceRange> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::rdm::pid::SubDeviceRange>() {
  return ::ola::rdm::pid::SubDeviceRange_descriptor();
}
template <> struct is_proto_enum< ::ola::rdm::pid::FieldType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::rdm::pid::FieldType>() {
  return ::ola::rdm::pid::FieldType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pids_2eproto__INCLUDED
