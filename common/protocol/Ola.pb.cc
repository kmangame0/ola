// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ola.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Ola.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ola {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* STREAMING_NO_RESPONSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STREAMING_NO_RESPONSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginReloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginReloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginDescriptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginDescriptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginDescriptionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginDescriptionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginStateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginStateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginStateChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginStateChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DmxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DmxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterDmxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterDmxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatchPortRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatchPortRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniverseNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniverseNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionalUniverseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalUniverseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniverseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniverseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniverseInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniverseInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortPriorityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortPriorityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceConfigReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceConfigReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UID_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniverseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniverseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIDListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIDListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMRequestOverrideOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMRequestOverrideOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMDiscoveryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMDiscoveryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMFrameTiming_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMFrameTiming_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDMResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDMResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PatchAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MergeMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PluginIds_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RDMResponseCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RDMResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RDMCommandClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeCodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Ola_2eproto() {
  protobuf_AddDesc_Ola_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Ola.proto");
  GOOGLE_CHECK(file != NULL);
  STREAMING_NO_RESPONSE_descriptor_ = file->message_type(0);
  static const int STREAMING_NO_RESPONSE_offsets_[1] = {
  };
  STREAMING_NO_RESPONSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STREAMING_NO_RESPONSE_descriptor_,
      STREAMING_NO_RESPONSE::default_instance_,
      STREAMING_NO_RESPONSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STREAMING_NO_RESPONSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STREAMING_NO_RESPONSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STREAMING_NO_RESPONSE));
  Ack_descriptor_ = file->message_type(1);
  static const int Ack_offsets_[1] = {
  };
  Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack));
  PluginListRequest_descriptor_ = file->message_type(2);
  static const int PluginListRequest_offsets_[1] = {
  };
  PluginListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginListRequest_descriptor_,
      PluginListRequest::default_instance_,
      PluginListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginListRequest));
  PluginReloadRequest_descriptor_ = file->message_type(3);
  static const int PluginReloadRequest_offsets_[1] = {
  };
  PluginReloadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginReloadRequest_descriptor_,
      PluginReloadRequest::default_instance_,
      PluginReloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginReloadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginReloadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginReloadRequest));
  PluginInfo_descriptor_ = file->message_type(4);
  static const int PluginInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, enabled_),
  };
  PluginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginInfo_descriptor_,
      PluginInfo::default_instance_,
      PluginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginInfo));
  PluginListReply_descriptor_ = file->message_type(5);
  static const int PluginListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginListReply, plugin_),
  };
  PluginListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginListReply_descriptor_,
      PluginListReply::default_instance_,
      PluginListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginListReply));
  PluginDescriptionRequest_descriptor_ = file->message_type(6);
  static const int PluginDescriptionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionRequest, plugin_id_),
  };
  PluginDescriptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginDescriptionRequest_descriptor_,
      PluginDescriptionRequest::default_instance_,
      PluginDescriptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginDescriptionRequest));
  PluginDescriptionReply_descriptor_ = file->message_type(7);
  static const int PluginDescriptionReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionReply, description_),
  };
  PluginDescriptionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginDescriptionReply_descriptor_,
      PluginDescriptionReply::default_instance_,
      PluginDescriptionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginDescriptionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginDescriptionReply));
  PluginStateRequest_descriptor_ = file->message_type(8);
  static const int PluginStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateRequest, plugin_id_),
  };
  PluginStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginStateRequest_descriptor_,
      PluginStateRequest::default_instance_,
      PluginStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginStateRequest));
  PluginStateReply_descriptor_ = file->message_type(9);
  static const int PluginStateReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, preferences_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, conflicts_with_),
  };
  PluginStateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginStateReply_descriptor_,
      PluginStateReply::default_instance_,
      PluginStateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginStateReply));
  PluginStateChangeRequest_descriptor_ = file->message_type(10);
  static const int PluginStateChangeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateChangeRequest, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateChangeRequest, enabled_),
  };
  PluginStateChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginStateChangeRequest_descriptor_,
      PluginStateChangeRequest::default_instance_,
      PluginStateChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStateChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginStateChangeRequest));
  DeviceInfoRequest_descriptor_ = file->message_type(11);
  static const int DeviceInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoRequest, plugin_id_),
  };
  DeviceInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfoRequest_descriptor_,
      DeviceInfoRequest::default_instance_,
      DeviceInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfoRequest));
  PortInfo_descriptor_ = file->message_type(12);
  static const int PortInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, port_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, priority_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, priority_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, supports_rdm_),
  };
  PortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortInfo_descriptor_,
      PortInfo::default_instance_,
      PortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortInfo));
  DeviceInfo_descriptor_ = file->message_type(13);
  static const int DeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, input_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, output_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_id_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  DeviceInfoReply_descriptor_ = file->message_type(14);
  static const int DeviceInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoReply, device_),
  };
  DeviceInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfoReply_descriptor_,
      DeviceInfoReply::default_instance_,
      DeviceInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfoReply));
  DmxData_descriptor_ = file->message_type(15);
  static const int DmxData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmxData, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmxData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmxData, priority_),
  };
  DmxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DmxData_descriptor_,
      DmxData::default_instance_,
      DmxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DmxData));
  RegisterDmxRequest_descriptor_ = file->message_type(16);
  static const int RegisterDmxRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterDmxRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterDmxRequest, action_),
  };
  RegisterDmxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterDmxRequest_descriptor_,
      RegisterDmxRequest::default_instance_,
      RegisterDmxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterDmxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterDmxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterDmxRequest));
  PatchPortRequest_descriptor_ = file->message_type(17);
  static const int PatchPortRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, device_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, port_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, is_output_),
  };
  PatchPortRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatchPortRequest_descriptor_,
      PatchPortRequest::default_instance_,
      PatchPortRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchPortRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatchPortRequest));
  UniverseNameRequest_descriptor_ = file->message_type(18);
  static const int UniverseNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseNameRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseNameRequest, name_),
  };
  UniverseNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniverseNameRequest_descriptor_,
      UniverseNameRequest::default_instance_,
      UniverseNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniverseNameRequest));
  MergeModeRequest_descriptor_ = file->message_type(19);
  static const int MergeModeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModeRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModeRequest, merge_mode_),
  };
  MergeModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeModeRequest_descriptor_,
      MergeModeRequest::default_instance_,
      MergeModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeModeRequest));
  OptionalUniverseRequest_descriptor_ = file->message_type(20);
  static const int OptionalUniverseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalUniverseRequest, universe_),
  };
  OptionalUniverseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionalUniverseRequest_descriptor_,
      OptionalUniverseRequest::default_instance_,
      OptionalUniverseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalUniverseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalUniverseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionalUniverseRequest));
  UniverseInfo_descriptor_ = file->message_type(21);
  static const int UniverseInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, merge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, input_port_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, output_port_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, rdm_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, input_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, output_ports_),
  };
  UniverseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniverseInfo_descriptor_,
      UniverseInfo::default_instance_,
      UniverseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniverseInfo));
  UniverseInfoReply_descriptor_ = file->message_type(22);
  static const int UniverseInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfoReply, universe_),
  };
  UniverseInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniverseInfoReply_descriptor_,
      UniverseInfoReply::default_instance_,
      UniverseInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniverseInfoReply));
  PortPriorityRequest_descriptor_ = file->message_type(23);
  static const int PortPriorityRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, device_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, is_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, port_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, priority_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, priority_),
  };
  PortPriorityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortPriorityRequest_descriptor_,
      PortPriorityRequest::default_instance_,
      PortPriorityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortPriorityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortPriorityRequest));
  DeviceConfigRequest_descriptor_ = file->message_type(24);
  static const int DeviceConfigRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigRequest, device_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigRequest, data_),
  };
  DeviceConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceConfigRequest_descriptor_,
      DeviceConfigRequest::default_instance_,
      DeviceConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceConfigRequest));
  DeviceConfigReply_descriptor_ = file->message_type(25);
  static const int DeviceConfigReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigReply, data_),
  };
  DeviceConfigReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceConfigReply_descriptor_,
      DeviceConfigReply::default_instance_,
      DeviceConfigReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfigReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceConfigReply));
  UID_descriptor_ = file->message_type(26);
  static const int UID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UID, esta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UID, device_id_),
  };
  UID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UID_descriptor_,
      UID::default_instance_,
      UID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UID));
  UniverseRequest_descriptor_ = file->message_type(27);
  static const int UniverseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseRequest, universe_),
  };
  UniverseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniverseRequest_descriptor_,
      UniverseRequest::default_instance_,
      UniverseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniverseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniverseRequest));
  DiscoveryRequest_descriptor_ = file->message_type(28);
  static const int DiscoveryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, full_),
  };
  DiscoveryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryRequest_descriptor_,
      DiscoveryRequest::default_instance_,
      DiscoveryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryRequest));
  UIDListReply_descriptor_ = file->message_type(29);
  static const int UIDListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDListReply, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDListReply, uid_),
  };
  UIDListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIDListReply_descriptor_,
      UIDListReply::default_instance_,
      UIDListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIDListReply));
  RDMRequestOverrideOptions_descriptor_ = file->message_type(30);
  static const int RDMRequestOverrideOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, sub_start_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, message_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, message_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, checksum_),
  };
  RDMRequestOverrideOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMRequestOverrideOptions_descriptor_,
      RDMRequestOverrideOptions::default_instance_,
      RDMRequestOverrideOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequestOverrideOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMRequestOverrideOptions));
  RDMRequest_descriptor_ = file->message_type(31);
  static const int RDMRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, sub_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, param_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, is_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, include_raw_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, options_),
  };
  RDMRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMRequest_descriptor_,
      RDMRequest::default_instance_,
      RDMRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMRequest));
  RDMDiscoveryRequest_descriptor_ = file->message_type(32);
  static const int RDMDiscoveryRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, sub_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, param_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, include_raw_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, options_),
  };
  RDMDiscoveryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMDiscoveryRequest_descriptor_,
      RDMDiscoveryRequest::default_instance_,
      RDMDiscoveryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMDiscoveryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMDiscoveryRequest));
  RDMFrameTiming_descriptor_ = file->message_type(33);
  static const int RDMFrameTiming_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, response_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, break_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, mark_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, data_time_),
  };
  RDMFrameTiming_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMFrameTiming_descriptor_,
      RDMFrameTiming::default_instance_,
      RDMFrameTiming_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrameTiming, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMFrameTiming));
  RDMFrame_descriptor_ = file->message_type(34);
  static const int RDMFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrame, raw_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrame, timing_),
  };
  RDMFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMFrame_descriptor_,
      RDMFrame::default_instance_,
      RDMFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMFrame));
  RDMResponse_descriptor_ = file->message_type(35);
  static const int RDMResponse_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, source_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, dest_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, transaction_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, message_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, sub_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, command_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, param_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, raw_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, raw_frame_),
  };
  RDMResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDMResponse_descriptor_,
      RDMResponse::default_instance_,
      RDMResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDMResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDMResponse));
  TimeCode_descriptor_ = file->message_type(36);
  static const int TimeCode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, type_),
  };
  TimeCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeCode_descriptor_,
      TimeCode::default_instance_,
      TimeCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeCode));
  RegisterAction_descriptor_ = file->enum_type(0);
  PatchAction_descriptor_ = file->enum_type(1);
  MergeMode_descriptor_ = file->enum_type(2);
  PluginIds_descriptor_ = file->enum_type(3);
  RDMResponseCode_descriptor_ = file->enum_type(4);
  RDMResponseType_descriptor_ = file->enum_type(5);
  RDMCommandClass_descriptor_ = file->enum_type(6);
  TimeCodeType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Ola_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STREAMING_NO_RESPONSE_descriptor_, &STREAMING_NO_RESPONSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack_descriptor_, &Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginListRequest_descriptor_, &PluginListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginReloadRequest_descriptor_, &PluginReloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginInfo_descriptor_, &PluginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginListReply_descriptor_, &PluginListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginDescriptionRequest_descriptor_, &PluginDescriptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginDescriptionReply_descriptor_, &PluginDescriptionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginStateRequest_descriptor_, &PluginStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginStateReply_descriptor_, &PluginStateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginStateChangeRequest_descriptor_, &PluginStateChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfoRequest_descriptor_, &DeviceInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortInfo_descriptor_, &PortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfoReply_descriptor_, &DeviceInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DmxData_descriptor_, &DmxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterDmxRequest_descriptor_, &RegisterDmxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatchPortRequest_descriptor_, &PatchPortRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniverseNameRequest_descriptor_, &UniverseNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeModeRequest_descriptor_, &MergeModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionalUniverseRequest_descriptor_, &OptionalUniverseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniverseInfo_descriptor_, &UniverseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniverseInfoReply_descriptor_, &UniverseInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortPriorityRequest_descriptor_, &PortPriorityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceConfigRequest_descriptor_, &DeviceConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceConfigReply_descriptor_, &DeviceConfigReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UID_descriptor_, &UID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniverseRequest_descriptor_, &UniverseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryRequest_descriptor_, &DiscoveryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIDListReply_descriptor_, &UIDListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMRequestOverrideOptions_descriptor_, &RDMRequestOverrideOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMRequest_descriptor_, &RDMRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMDiscoveryRequest_descriptor_, &RDMDiscoveryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMFrameTiming_descriptor_, &RDMFrameTiming::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMFrame_descriptor_, &RDMFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDMResponse_descriptor_, &RDMResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeCode_descriptor_, &TimeCode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Ola_2eproto() {
  delete STREAMING_NO_RESPONSE::default_instance_;
  delete STREAMING_NO_RESPONSE_reflection_;
  delete Ack::default_instance_;
  delete Ack_reflection_;
  delete PluginListRequest::default_instance_;
  delete PluginListRequest_reflection_;
  delete PluginReloadRequest::default_instance_;
  delete PluginReloadRequest_reflection_;
  delete PluginInfo::default_instance_;
  delete PluginInfo_reflection_;
  delete PluginListReply::default_instance_;
  delete PluginListReply_reflection_;
  delete PluginDescriptionRequest::default_instance_;
  delete PluginDescriptionRequest_reflection_;
  delete PluginDescriptionReply::default_instance_;
  delete PluginDescriptionReply_reflection_;
  delete PluginStateRequest::default_instance_;
  delete PluginStateRequest_reflection_;
  delete PluginStateReply::default_instance_;
  delete PluginStateReply_reflection_;
  delete PluginStateChangeRequest::default_instance_;
  delete PluginStateChangeRequest_reflection_;
  delete DeviceInfoRequest::default_instance_;
  delete DeviceInfoRequest_reflection_;
  delete PortInfo::default_instance_;
  delete PortInfo_reflection_;
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete DeviceInfoReply::default_instance_;
  delete DeviceInfoReply_reflection_;
  delete DmxData::default_instance_;
  delete DmxData_reflection_;
  delete RegisterDmxRequest::default_instance_;
  delete RegisterDmxRequest_reflection_;
  delete PatchPortRequest::default_instance_;
  delete PatchPortRequest_reflection_;
  delete UniverseNameRequest::default_instance_;
  delete UniverseNameRequest_reflection_;
  delete MergeModeRequest::default_instance_;
  delete MergeModeRequest_reflection_;
  delete OptionalUniverseRequest::default_instance_;
  delete OptionalUniverseRequest_reflection_;
  delete UniverseInfo::default_instance_;
  delete UniverseInfo_reflection_;
  delete UniverseInfoReply::default_instance_;
  delete UniverseInfoReply_reflection_;
  delete PortPriorityRequest::default_instance_;
  delete PortPriorityRequest_reflection_;
  delete DeviceConfigRequest::default_instance_;
  delete DeviceConfigRequest_reflection_;
  delete DeviceConfigReply::default_instance_;
  delete DeviceConfigReply_reflection_;
  delete UID::default_instance_;
  delete UID_reflection_;
  delete UniverseRequest::default_instance_;
  delete UniverseRequest_reflection_;
  delete DiscoveryRequest::default_instance_;
  delete DiscoveryRequest_reflection_;
  delete UIDListReply::default_instance_;
  delete UIDListReply_reflection_;
  delete RDMRequestOverrideOptions::default_instance_;
  delete RDMRequestOverrideOptions_reflection_;
  delete RDMRequest::default_instance_;
  delete RDMRequest_reflection_;
  delete RDMDiscoveryRequest::default_instance_;
  delete RDMDiscoveryRequest_reflection_;
  delete RDMFrameTiming::default_instance_;
  delete RDMFrameTiming_reflection_;
  delete RDMFrame::default_instance_;
  delete RDMFrame_reflection_;
  delete RDMResponse::default_instance_;
  delete RDMResponse_reflection_;
  delete TimeCode::default_instance_;
  delete TimeCode_reflection_;
}

void protobuf_AddDesc_Ola_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tOla.proto\022\tola.proto\"\027\n\025STREAMING_NO_R"
    "ESPONSE\"\005\n\003Ack\"\023\n\021PluginListRequest\"\025\n\023P"
    "luginReloadRequest\"N\n\nPluginInfo\022\021\n\tplug"
    "in_id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006active\030\003 \002("
    "\010\022\017\n\007enabled\030\004 \001(\010\"8\n\017PluginListReply\022%\n"
    "\006plugin\030\001 \003(\0132\025.ola.proto.PluginInfo\"-\n\030"
    "PluginDescriptionRequest\022\021\n\tplugin_id\030\001 "
    "\002(\005\";\n\026PluginDescriptionReply\022\014\n\004name\030\001 "
    "\002(\t\022\023\n\013description\030\002 \002(\t\"\'\n\022PluginStateR"
    "equest\022\021\n\tplugin_id\030\001 \002(\005\"\214\001\n\020PluginStat"
    "eReply\022\014\n\004name\030\001 \002(\t\022\017\n\007enabled\030\002 \002(\010\022\016\n"
    "\006active\030\003 \002(\010\022\032\n\022preferences_source\030\004 \002("
    "\t\022-\n\016conflicts_with\030\005 \003(\0132\025.ola.proto.Pl"
    "uginInfo\">\n\030PluginStateChangeRequest\022\021\n\t"
    "plugin_id\030\001 \002(\005\022\017\n\007enabled\030\002 \002(\010\"&\n\021Devi"
    "ceInfoRequest\022\021\n\tplugin_id\030\001 \001(\005\"\265\001\n\010Por"
    "tInfo\022\017\n\007port_id\030\001 \002(\005\022\033\n\023priority_capab"
    "ility\030\002 \002(\005\022\023\n\013description\030\005 \002(\t\022\020\n\010univ"
    "erse\030\003 \001(\005\022\016\n\006active\030\004 \001(\010\022\025\n\rpriority_m"
    "ode\030\006 \001(\005\022\020\n\010priority\030\007 \001(\005\022\033\n\014supports_"
    "rdm\030\010 \001(\010:\005false\"\260\001\n\nDeviceInfo\022\024\n\014devic"
    "e_alias\030\001 \002(\005\022\021\n\tplugin_id\030\002 \002(\005\022\023\n\013devi"
    "ce_name\030\003 \002(\t\022\'\n\ninput_port\030\004 \003(\0132\023.ola."
    "proto.PortInfo\022(\n\013output_port\030\005 \003(\0132\023.ol"
    "a.proto.PortInfo\022\021\n\tdevice_id\030\006 \002(\t\"8\n\017D"
    "eviceInfoReply\022%\n\006device\030\001 \003(\0132\025.ola.pro"
    "to.DeviceInfo\";\n\007DmxData\022\020\n\010universe\030\001 \002"
    "(\005\022\014\n\004data\030\002 \002(\014\022\020\n\010priority\030\003 \001(\005\"Q\n\022Re"
    "gisterDmxRequest\022\020\n\010universe\030\001 \002(\005\022)\n\006ac"
    "tion\030\002 \002(\0162\031.ola.proto.RegisterAction\"\206\001"
    "\n\020PatchPortRequest\022\020\n\010universe\030\001 \002(\005\022\024\n\014"
    "device_alias\030\002 \002(\005\022\017\n\007port_id\030\003 \002(\005\022&\n\006a"
    "ction\030\004 \002(\0162\026.ola.proto.PatchAction\022\021\n\ti"
    "s_output\030\005 \002(\010\"5\n\023UniverseNameRequest\022\020\n"
    "\010universe\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\"N\n\020MergeMo"
    "deRequest\022\020\n\010universe\030\001 \002(\005\022(\n\nmerge_mod"
    "e\030\002 \002(\0162\024.ola.proto.MergeMode\"+\n\027Optiona"
    "lUniverseRequest\022\020\n\010universe\030\001 \001(\005\"\367\001\n\014U"
    "niverseInfo\022\020\n\010universe\030\001 \002(\005\022\014\n\004name\030\002 "
    "\002(\t\022(\n\nmerge_mode\030\003 \002(\0162\024.ola.proto.Merg"
    "eMode\022\030\n\020input_port_count\030\004 \002(\005\022\031\n\021outpu"
    "t_port_count\030\005 \002(\005\022\023\n\013rdm_devices\030\006 \002(\005\022"
    "(\n\013input_ports\030\007 \003(\0132\023.ola.proto.PortInf"
    "o\022)\n\014output_ports\030\010 \003(\0132\023.ola.proto.Port"
    "Info\">\n\021UniverseInfoReply\022)\n\010universe\030\001 "
    "\003(\0132\027.ola.proto.UniverseInfo\"x\n\023PortPrio"
    "rityRequest\022\024\n\014device_alias\030\001 \002(\005\022\021\n\tis_"
    "output\030\002 \002(\010\022\017\n\007port_id\030\003 \002(\005\022\025\n\rpriorit"
    "y_mode\030\004 \002(\005\022\020\n\010priority\030\005 \001(\005\"9\n\023Device"
    "ConfigRequest\022\024\n\014device_alias\030\001 \002(\005\022\014\n\004d"
    "ata\030\002 \002(\014\"!\n\021DeviceConfigReply\022\014\n\004data\030\001"
    " \002(\014\")\n\003UID\022\017\n\007esta_id\030\001 \002(\005\022\021\n\tdevice_i"
    "d\030\002 \002(\007\"#\n\017UniverseRequest\022\020\n\010universe\030\001"
    " \002(\005\"2\n\020DiscoveryRequest\022\020\n\010universe\030\001 \002"
    "(\005\022\014\n\004full\030\002 \002(\010\"=\n\014UIDListReply\022\020\n\010univ"
    "erse\030\001 \002(\005\022\033\n\003uid\030\002 \003(\0132\016.ola.proto.UID\""
    "t\n\031RDMRequestOverrideOptions\022\026\n\016sub_star"
    "t_code\030\001 \001(\r\022\026\n\016message_length\030\002 \001(\r\022\025\n\r"
    "message_count\030\003 \001(\r\022\020\n\010checksum\030\004 \001(\r\"\333\001"
    "\n\nRDMRequest\022\020\n\010universe\030\001 \002(\005\022\033\n\003uid\030\002 "
    "\002(\0132\016.ola.proto.UID\022\022\n\nsub_device\030\003 \002(\005\022"
    "\020\n\010param_id\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\022\016\n\006is_se"
    "t\030\006 \002(\010\022#\n\024include_raw_response\030\007 \001(\010:\005f"
    "alse\0225\n\007options\030\010 \001(\0132$.ola.proto.RDMReq"
    "uestOverrideOptions\"\324\001\n\023RDMDiscoveryRequ"
    "est\022\020\n\010universe\030\001 \002(\005\022\033\n\003uid\030\002 \002(\0132\016.ola"
    ".proto.UID\022\022\n\nsub_device\030\003 \002(\005\022\020\n\010param_"
    "id\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\022#\n\024include_raw_re"
    "sponse\030\006 \001(\010:\005false\0225\n\007options\030\010 \001(\0132$.o"
    "la.proto.RDMRequestOverrideOptions\"b\n\016RD"
    "MFrameTiming\022\026\n\016response_delay\030\001 \001(\005\022\022\n\n"
    "break_time\030\002 \001(\005\022\021\n\tmark_time\030\003 \001(\005\022\021\n\td"
    "ata_time\030\004 \001(\005\"K\n\010RDMFrame\022\024\n\014raw_respon"
    "se\030\001 \001(\014\022)\n\006timing\030\002 \001(\0132\031.ola.proto.RDM"
    "FrameTiming\"\226\003\n\013RDMResponse\0221\n\rresponse_"
    "code\030\001 \002(\0162\032.ola.proto.RDMResponseCode\022\""
    "\n\nsource_uid\030\t \001(\0132\016.ola.proto.UID\022 \n\010de"
    "st_uid\030\n \001(\0132\016.ola.proto.UID\022\032\n\022transact"
    "ion_number\030\013 \001(\005\0221\n\rresponse_type\030\002 \001(\0162"
    "\032.ola.proto.RDMResponseType\022\030\n\rmessage_c"
    "ount\030\003 \001(\r:\0010\022\022\n\nsub_device\030\007 \001(\r\0221\n\rcom"
    "mand_class\030\006 \001(\0162\032.ola.proto.RDMCommandC"
    "lass\022\020\n\010param_id\030\005 \001(\r\022\016\n\004data\030\004 \001(\014:\000\022\024"
    "\n\014raw_response\030\010 \003(\014\022&\n\traw_frame\030\014 \003(\0132"
    "\023.ola.proto.RDMFrame\"r\n\010TimeCode\022\r\n\005hour"
    "s\030\001 \002(\r\022\017\n\007minutes\030\002 \002(\r\022\017\n\007seconds\030\003 \002("
    "\r\022\016\n\006frames\030\004 \002(\r\022%\n\004type\030\005 \002(\0162\027.ola.pr"
    "oto.TimeCodeType*.\n\016RegisterAction\022\014\n\010RE"
    "GISTER\020\001\022\016\n\nUNREGISTER\020\002*%\n\013PatchAction\022"
    "\t\n\005PATCH\020\001\022\013\n\007UNPATCH\020\002*\035\n\tMergeMode\022\007\n\003"
    "HTP\020\001\022\007\n\003LTP\020\002*\304\004\n\tPluginIds\022\022\n\016OLA_PLUG"
    "IN_ALL\020\000\022\024\n\020OLA_PLUGIN_DUMMY\020\001\022\025\n\021OLA_PL"
    "UGIN_ARTNET\020\002\022\026\n\022OLA_PLUGIN_SHOWNET\020\003\022\025\n"
    "\021OLA_PLUGIN_ESPNET\020\004\022\025\n\021OLA_PLUGIN_USBPR"
    "O\020\005\022\026\n\022OLA_PLUGIN_OPENDMX\020\006\022\026\n\022OLA_PLUGI"
    "N_SANDNET\020\007\022\031\n\025OLA_PLUGIN_STAGEPROFI\020\010\022\027"
    "\n\023OLA_PLUGIN_PATHPORT\020\t\022\030\n\024OLA_PLUGIN_DM"
    "X4LINUX\020\n\022\023\n\017OLA_PLUGIN_E131\020\013\022\025\n\021OLA_PL"
    "UGIN_USBDMX\020\014\022\026\n\022OLA_PLUGIN_FTDIDMX\020\r\022\022\n"
    "\016OLA_PLUGIN_OSC\020\016\022\022\n\016OLA_PLUGIN_SPI\020\017\022\024\n"
    "\020OLA_PLUGIN_KINET\020\020\022\025\n\021OLA_PLUGIN_KARATE"
    "\020\021\022\026\n\022OLA_PLUGIN_MILINST\020\022\022\025\n\021OLA_PLUGIN"
    "_RENARD\020\023\022\026\n\022OLA_PLUGIN_UARTDMX\020\024\022\037\n\033OLA"
    "_PLUGIN_OPENPIXELCONTROL\020\025\022\023\n\017OLA_PLUGIN"
    "_GPIO\020\026\022\034\n\027OLA_PLUGIN_EXPERIMENTAL\020\220N*\265\004"
    "\n\017RDMResponseCode\022\024\n\020RDM_COMPLETED_OK\020\000\022"
    "\025\n\021RDM_WAS_BROADCAST\020\001\022\026\n\022RDM_FAILED_TO_"
    "SEND\020\002\022\017\n\013RDM_TIMEOUT\020\003\022\030\n\024RDM_INVALID_R"
    "ESPONSE\020\004\022\023\n\017RDM_UNKNOWN_UID\020\005\022\032\n\026RDM_CH"
    "ECKSUM_INCORRECT\020\006\022\034\n\030RDM_TRANSACTION_MI"
    "SMATCH\020\007\022\033\n\027RDM_SUB_DEVICE_MISMATCH\020\010\022\030\n"
    "\024RDM_SRC_UID_MISMATCH\020\t\022\031\n\025RDM_DEST_UID_"
    "MISMATCH\020\n\022\034\n\030RDM_WRONG_SUB_START_CODE\020\013"
    "\022\030\n\024RDM_PACKET_TOO_SHORT\020\014\022\036\n\032RDM_PACKET"
    "_LENGTH_MISMATCH\020\r\022\035\n\031RDM_PARAM_LENGTH_M"
    "ISMATCH\020\016\022\035\n\031RDM_INVALID_COMMAND_CLASS\020\017"
    "\022\036\n\032RDM_COMMAND_CLASS_MISMATCH\020\020\022\035\n\031RDM_"
    "INVALID_RESPONSE_TYPE\020\021\022&\n\"RDM_PLUGIN_DI"
    "SCOVERY_NOT_SUPPORTED\020\022\022\024\n\020RDM_DUB_RESPO"
    "NSE\020\023*F\n\017RDMResponseType\022\013\n\007RDM_ACK\020\000\022\021\n"
    "\rRDM_ACK_TIMER\020\001\022\023\n\017RDM_NACK_REASON\020\002*Y\n"
    "\017RDMCommandClass\022\024\n\020RDM_GET_RESPONSE\020\000\022\024"
    "\n\020RDM_SET_RESPONSE\020\001\022\032\n\026RDM_DISCOVERY_RE"
    "SPONSE\020\002*X\n\014TimeCodeType\022\021\n\rTIMECODE_FIL"
    "M\020\000\022\020\n\014TIMECODE_EBU\020\001\022\017\n\013TIMECODE_DF\020\002\022\022"
    "\n\016TIMECODE_SMPTE\020\0032\303\014\n\020OlaServerService\022"
    "F\n\nGetPlugins\022\034.ola.proto.PluginListRequ"
    "est\032\032.ola.proto.PluginListReply\022\?\n\rReloa"
    "dPlugins\022\036.ola.proto.PluginReloadRequest"
    "\032\016.ola.proto.Ack\022^\n\024GetPluginDescription"
    "\022#.ola.proto.PluginDescriptionRequest\032!."
    "ola.proto.PluginDescriptionReply\022L\n\016GetP"
    "luginState\022\035.ola.proto.PluginStateReques"
    "t\032\033.ola.proto.PluginStateReply\022I\n\rGetDev"
    "iceInfo\022\034.ola.proto.DeviceInfoRequest\032\032."
    "ola.proto.DeviceInfoReply\022S\n\021GetCandidat"
    "ePorts\022\".ola.proto.OptionalUniverseReque"
    "st\032\032.ola.proto.DeviceInfoReply\022O\n\017Config"
    "ureDevice\022\036.ola.proto.DeviceConfigReques"
    "t\032\034.ola.proto.DeviceConfigReply\022E\n\016SetPl"
    "uginState\022#.ola.proto.PluginStateChangeR"
    "equest\032\016.ola.proto.Ack\022A\n\017SetPortPriorit"
    "y\022\036.ola.proto.PortPriorityRequest\032\016.ola."
    "proto.Ack\022S\n\017GetUniverseInfo\022\".ola.proto"
    ".OptionalUniverseRequest\032\034.ola.proto.Uni"
    "verseInfoReply\022A\n\017SetUniverseName\022\036.ola."
    "proto.UniverseNameRequest\032\016.ola.proto.Ac"
    "k\022;\n\014SetMergeMode\022\033.ola.proto.MergeModeR"
    "equest\032\016.ola.proto.Ack\0228\n\tPatchPort\022\033.ol"
    "a.proto.PatchPortRequest\032\016.ola.proto.Ack"
    "\022\?\n\016RegisterForDmx\022\035.ola.proto.RegisterD"
    "mxRequest\032\016.ola.proto.Ack\0223\n\rUpdateDmxDa"
    "ta\022\022.ola.proto.DmxData\032\016.ola.proto.Ack\0228"
    "\n\006GetDmx\022\032.ola.proto.UniverseRequest\032\022.o"
    "la.proto.DmxData\022>\n\007GetUIDs\022\032.ola.proto."
    "UniverseRequest\032\027.ola.proto.UIDListReply"
    "\022F\n\016ForceDiscovery\022\033.ola.proto.Discovery"
    "Request\032\027.ola.proto.UIDListReply\022.\n\014SetS"
    "ourceUID\022\016.ola.proto.UID\032\016.ola.proto.Ack"
    "\022;\n\nRDMCommand\022\025.ola.proto.RDMRequest\032\026."
    "ola.proto.RDMResponse\022M\n\023RDMDiscoveryCom"
    "mand\022\036.ola.proto.RDMDiscoveryRequest\032\026.o"
    "la.proto.RDMResponse\022E\n\rStreamDmxData\022\022."
    "ola.proto.DmxData\032 .ola.proto.STREAMING_"
    "NO_RESPONSE\0223\n\014SendTimeCode\022\023.ola.proto."
    "TimeCode\032\016.ola.proto.Ack2G\n\020OlaClientSer"
    "vice\0223\n\rUpdateDmxData\022\022.ola.proto.DmxDat"
    "a\032\016.ola.proto.AckB\t\200\001\000\210\001\001\220\001\001", 6708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Ola.proto", &protobuf_RegisterTypes);
  STREAMING_NO_RESPONSE::default_instance_ = new STREAMING_NO_RESPONSE();
  Ack::default_instance_ = new Ack();
  PluginListRequest::default_instance_ = new PluginListRequest();
  PluginReloadRequest::default_instance_ = new PluginReloadRequest();
  PluginInfo::default_instance_ = new PluginInfo();
  PluginListReply::default_instance_ = new PluginListReply();
  PluginDescriptionRequest::default_instance_ = new PluginDescriptionRequest();
  PluginDescriptionReply::default_instance_ = new PluginDescriptionReply();
  PluginStateRequest::default_instance_ = new PluginStateRequest();
  PluginStateReply::default_instance_ = new PluginStateReply();
  PluginStateChangeRequest::default_instance_ = new PluginStateChangeRequest();
  DeviceInfoRequest::default_instance_ = new DeviceInfoRequest();
  PortInfo::default_instance_ = new PortInfo();
  DeviceInfo::default_instance_ = new DeviceInfo();
  DeviceInfoReply::default_instance_ = new DeviceInfoReply();
  DmxData::default_instance_ = new DmxData();
  RegisterDmxRequest::default_instance_ = new RegisterDmxRequest();
  PatchPortRequest::default_instance_ = new PatchPortRequest();
  UniverseNameRequest::default_instance_ = new UniverseNameRequest();
  MergeModeRequest::default_instance_ = new MergeModeRequest();
  OptionalUniverseRequest::default_instance_ = new OptionalUniverseRequest();
  UniverseInfo::default_instance_ = new UniverseInfo();
  UniverseInfoReply::default_instance_ = new UniverseInfoReply();
  PortPriorityRequest::default_instance_ = new PortPriorityRequest();
  DeviceConfigRequest::default_instance_ = new DeviceConfigRequest();
  DeviceConfigReply::default_instance_ = new DeviceConfigReply();
  UID::default_instance_ = new UID();
  UniverseRequest::default_instance_ = new UniverseRequest();
  DiscoveryRequest::default_instance_ = new DiscoveryRequest();
  UIDListReply::default_instance_ = new UIDListReply();
  RDMRequestOverrideOptions::default_instance_ = new RDMRequestOverrideOptions();
  RDMRequest::default_instance_ = new RDMRequest();
  RDMDiscoveryRequest::default_instance_ = new RDMDiscoveryRequest();
  RDMFrameTiming::default_instance_ = new RDMFrameTiming();
  RDMFrame::default_instance_ = new RDMFrame();
  RDMResponse::default_instance_ = new RDMResponse();
  TimeCode::default_instance_ = new TimeCode();
  STREAMING_NO_RESPONSE::default_instance_->InitAsDefaultInstance();
  Ack::default_instance_->InitAsDefaultInstance();
  PluginListRequest::default_instance_->InitAsDefaultInstance();
  PluginReloadRequest::default_instance_->InitAsDefaultInstance();
  PluginInfo::default_instance_->InitAsDefaultInstance();
  PluginListReply::default_instance_->InitAsDefaultInstance();
  PluginDescriptionRequest::default_instance_->InitAsDefaultInstance();
  PluginDescriptionReply::default_instance_->InitAsDefaultInstance();
  PluginStateRequest::default_instance_->InitAsDefaultInstance();
  PluginStateReply::default_instance_->InitAsDefaultInstance();
  PluginStateChangeRequest::default_instance_->InitAsDefaultInstance();
  DeviceInfoRequest::default_instance_->InitAsDefaultInstance();
  PortInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfoReply::default_instance_->InitAsDefaultInstance();
  DmxData::default_instance_->InitAsDefaultInstance();
  RegisterDmxRequest::default_instance_->InitAsDefaultInstance();
  PatchPortRequest::default_instance_->InitAsDefaultInstance();
  UniverseNameRequest::default_instance_->InitAsDefaultInstance();
  MergeModeRequest::default_instance_->InitAsDefaultInstance();
  OptionalUniverseRequest::default_instance_->InitAsDefaultInstance();
  UniverseInfo::default_instance_->InitAsDefaultInstance();
  UniverseInfoReply::default_instance_->InitAsDefaultInstance();
  PortPriorityRequest::default_instance_->InitAsDefaultInstance();
  DeviceConfigRequest::default_instance_->InitAsDefaultInstance();
  DeviceConfigReply::default_instance_->InitAsDefaultInstance();
  UID::default_instance_->InitAsDefaultInstance();
  UniverseRequest::default_instance_->InitAsDefaultInstance();
  DiscoveryRequest::default_instance_->InitAsDefaultInstance();
  UIDListReply::default_instance_->InitAsDefaultInstance();
  RDMRequestOverrideOptions::default_instance_->InitAsDefaultInstance();
  RDMRequest::default_instance_->InitAsDefaultInstance();
  RDMDiscoveryRequest::default_instance_->InitAsDefaultInstance();
  RDMFrameTiming::default_instance_->InitAsDefaultInstance();
  RDMFrame::default_instance_->InitAsDefaultInstance();
  RDMResponse::default_instance_->InitAsDefaultInstance();
  TimeCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Ola_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Ola_2eproto {
  StaticDescriptorInitializer_Ola_2eproto() {
    protobuf_AddDesc_Ola_2eproto();
  }
} static_descriptor_initializer_Ola_2eproto_;
const ::google::protobuf::EnumDescriptor* RegisterAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAction_descriptor_;
}
bool RegisterAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PatchAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatchAction_descriptor_;
}
bool PatchAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MergeMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeMode_descriptor_;
}
bool MergeMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PluginIds_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginIds_descriptor_;
}
bool PluginIds_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 10000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RDMResponseCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMResponseCode_descriptor_;
}
bool RDMResponseCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RDMResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMResponseType_descriptor_;
}
bool RDMResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RDMCommandClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMCommandClass_descriptor_;
}
bool RDMCommandClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeCodeType_descriptor_;
}
bool TimeCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

STREAMING_NO_RESPONSE::STREAMING_NO_RESPONSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.STREAMING_NO_RESPONSE)
}

void STREAMING_NO_RESPONSE::InitAsDefaultInstance() {
}

STREAMING_NO_RESPONSE::STREAMING_NO_RESPONSE(const STREAMING_NO_RESPONSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.STREAMING_NO_RESPONSE)
}

void STREAMING_NO_RESPONSE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STREAMING_NO_RESPONSE::~STREAMING_NO_RESPONSE() {
  // @@protoc_insertion_point(destructor:ola.proto.STREAMING_NO_RESPONSE)
  SharedDtor();
}

void STREAMING_NO_RESPONSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STREAMING_NO_RESPONSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STREAMING_NO_RESPONSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STREAMING_NO_RESPONSE_descriptor_;
}

const STREAMING_NO_RESPONSE& STREAMING_NO_RESPONSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

STREAMING_NO_RESPONSE* STREAMING_NO_RESPONSE::default_instance_ = NULL;

STREAMING_NO_RESPONSE* STREAMING_NO_RESPONSE::New() const {
  return new STREAMING_NO_RESPONSE;
}

void STREAMING_NO_RESPONSE::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STREAMING_NO_RESPONSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.STREAMING_NO_RESPONSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.STREAMING_NO_RESPONSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.STREAMING_NO_RESPONSE)
  return false;
#undef DO_
}

void STREAMING_NO_RESPONSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.STREAMING_NO_RESPONSE)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.STREAMING_NO_RESPONSE)
}

::google::protobuf::uint8* STREAMING_NO_RESPONSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.STREAMING_NO_RESPONSE)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.STREAMING_NO_RESPONSE)
  return target;
}

int STREAMING_NO_RESPONSE::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STREAMING_NO_RESPONSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STREAMING_NO_RESPONSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STREAMING_NO_RESPONSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STREAMING_NO_RESPONSE::MergeFrom(const STREAMING_NO_RESPONSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STREAMING_NO_RESPONSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STREAMING_NO_RESPONSE::CopyFrom(const STREAMING_NO_RESPONSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STREAMING_NO_RESPONSE::IsInitialized() const {

  return true;
}

void STREAMING_NO_RESPONSE::Swap(STREAMING_NO_RESPONSE* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STREAMING_NO_RESPONSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STREAMING_NO_RESPONSE_descriptor_;
  metadata.reflection = STREAMING_NO_RESPONSE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ack::Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.Ack)
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.Ack)
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:ola.proto.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New() const {
  return new Ack;
}

void Ack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.Ack)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.Ack)
}

::google::protobuf::uint8* Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.Ack)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.Ack)
  return target;
}

int Ack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {

  return true;
}

void Ack::Swap(Ack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PluginListRequest::PluginListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginListRequest)
}

void PluginListRequest::InitAsDefaultInstance() {
}

PluginListRequest::PluginListRequest(const PluginListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginListRequest)
}

void PluginListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginListRequest::~PluginListRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginListRequest)
  SharedDtor();
}

void PluginListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginListRequest_descriptor_;
}

const PluginListRequest& PluginListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginListRequest* PluginListRequest::default_instance_ = NULL;

PluginListRequest* PluginListRequest::New() const {
  return new PluginListRequest;
}

void PluginListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginListRequest)
  return false;
#undef DO_
}

void PluginListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginListRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginListRequest)
}

::google::protobuf::uint8* PluginListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginListRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginListRequest)
  return target;
}

int PluginListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginListRequest::MergeFrom(const PluginListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginListRequest::CopyFrom(const PluginListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginListRequest::IsInitialized() const {

  return true;
}

void PluginListRequest::Swap(PluginListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginListRequest_descriptor_;
  metadata.reflection = PluginListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PluginReloadRequest::PluginReloadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginReloadRequest)
}

void PluginReloadRequest::InitAsDefaultInstance() {
}

PluginReloadRequest::PluginReloadRequest(const PluginReloadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginReloadRequest)
}

void PluginReloadRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginReloadRequest::~PluginReloadRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginReloadRequest)
  SharedDtor();
}

void PluginReloadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginReloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginReloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginReloadRequest_descriptor_;
}

const PluginReloadRequest& PluginReloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginReloadRequest* PluginReloadRequest::default_instance_ = NULL;

PluginReloadRequest* PluginReloadRequest::New() const {
  return new PluginReloadRequest;
}

void PluginReloadRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginReloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginReloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginReloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginReloadRequest)
  return false;
#undef DO_
}

void PluginReloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginReloadRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginReloadRequest)
}

::google::protobuf::uint8* PluginReloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginReloadRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginReloadRequest)
  return target;
}

int PluginReloadRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginReloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginReloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginReloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginReloadRequest::MergeFrom(const PluginReloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginReloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginReloadRequest::CopyFrom(const PluginReloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginReloadRequest::IsInitialized() const {

  return true;
}

void PluginReloadRequest::Swap(PluginReloadRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginReloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginReloadRequest_descriptor_;
  metadata.reflection = PluginReloadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginInfo::kPluginIdFieldNumber;
const int PluginInfo::kNameFieldNumber;
const int PluginInfo::kActiveFieldNumber;
const int PluginInfo::kEnabledFieldNumber;
#endif  // !_MSC_VER

PluginInfo::PluginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginInfo)
}

void PluginInfo::InitAsDefaultInstance() {
}

PluginInfo::PluginInfo(const PluginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginInfo)
}

void PluginInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plugin_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginInfo::~PluginInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginInfo)
  SharedDtor();
}

void PluginInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PluginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginInfo_descriptor_;
}

const PluginInfo& PluginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginInfo* PluginInfo::default_instance_ = NULL;

PluginInfo* PluginInfo::New() const {
  return new PluginInfo;
}

void PluginInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PluginInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(plugin_id_, enabled_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plugin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // required bool active = 3;
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 4;
      case 4: {
        if (tag == 32) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginInfo)
  return false;
#undef DO_
}

void PluginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginInfo)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plugin_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional bool enabled = 4;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginInfo)
}

::google::protobuf::uint8* PluginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginInfo)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plugin_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional bool enabled = 4;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginInfo)
  return target;
}

int PluginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginInfo::MergeFrom(const PluginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginInfo::CopyFrom(const PluginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PluginInfo::Swap(PluginInfo* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(name_, other->name_);
    std::swap(active_, other->active_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginInfo_descriptor_;
  metadata.reflection = PluginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginListReply::kPluginFieldNumber;
#endif  // !_MSC_VER

PluginListReply::PluginListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginListReply)
}

void PluginListReply::InitAsDefaultInstance() {
}

PluginListReply::PluginListReply(const PluginListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginListReply)
}

void PluginListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginListReply::~PluginListReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginListReply)
  SharedDtor();
}

void PluginListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginListReply_descriptor_;
}

const PluginListReply& PluginListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginListReply* PluginListReply::default_instance_ = NULL;

PluginListReply* PluginListReply::New() const {
  return new PluginListReply;
}

void PluginListReply::Clear() {
  plugin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.proto.PluginInfo plugin = 1;
      case 1: {
        if (tag == 10) {
         parse_plugin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plugin;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginListReply)
  return false;
#undef DO_
}

void PluginListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginListReply)
  // repeated .ola.proto.PluginInfo plugin = 1;
  for (int i = 0; i < this->plugin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginListReply)
}

::google::protobuf::uint8* PluginListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginListReply)
  // repeated .ola.proto.PluginInfo plugin = 1;
  for (int i = 0; i < this->plugin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginListReply)
  return target;
}

int PluginListReply::ByteSize() const {
  int total_size = 0;

  // repeated .ola.proto.PluginInfo plugin = 1;
  total_size += 1 * this->plugin_size();
  for (int i = 0; i < this->plugin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plugin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginListReply::MergeFrom(const PluginListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  plugin_.MergeFrom(from.plugin_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginListReply::CopyFrom(const PluginListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginListReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->plugin())) return false;
  return true;
}

void PluginListReply::Swap(PluginListReply* other) {
  if (other != this) {
    plugin_.Swap(&other->plugin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginListReply_descriptor_;
  metadata.reflection = PluginListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginDescriptionRequest::kPluginIdFieldNumber;
#endif  // !_MSC_VER

PluginDescriptionRequest::PluginDescriptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginDescriptionRequest)
}

void PluginDescriptionRequest::InitAsDefaultInstance() {
}

PluginDescriptionRequest::PluginDescriptionRequest(const PluginDescriptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginDescriptionRequest)
}

void PluginDescriptionRequest::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginDescriptionRequest::~PluginDescriptionRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginDescriptionRequest)
  SharedDtor();
}

void PluginDescriptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginDescriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginDescriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginDescriptionRequest_descriptor_;
}

const PluginDescriptionRequest& PluginDescriptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginDescriptionRequest* PluginDescriptionRequest::default_instance_ = NULL;

PluginDescriptionRequest* PluginDescriptionRequest::New() const {
  return new PluginDescriptionRequest;
}

void PluginDescriptionRequest::Clear() {
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginDescriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginDescriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plugin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginDescriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginDescriptionRequest)
  return false;
#undef DO_
}

void PluginDescriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginDescriptionRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plugin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginDescriptionRequest)
}

::google::protobuf::uint8* PluginDescriptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginDescriptionRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plugin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginDescriptionRequest)
  return target;
}

int PluginDescriptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginDescriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginDescriptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginDescriptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginDescriptionRequest::MergeFrom(const PluginDescriptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginDescriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginDescriptionRequest::CopyFrom(const PluginDescriptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginDescriptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PluginDescriptionRequest::Swap(PluginDescriptionRequest* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginDescriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginDescriptionRequest_descriptor_;
  metadata.reflection = PluginDescriptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginDescriptionReply::kNameFieldNumber;
const int PluginDescriptionReply::kDescriptionFieldNumber;
#endif  // !_MSC_VER

PluginDescriptionReply::PluginDescriptionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginDescriptionReply)
}

void PluginDescriptionReply::InitAsDefaultInstance() {
}

PluginDescriptionReply::PluginDescriptionReply(const PluginDescriptionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginDescriptionReply)
}

void PluginDescriptionReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginDescriptionReply::~PluginDescriptionReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginDescriptionReply)
  SharedDtor();
}

void PluginDescriptionReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void PluginDescriptionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginDescriptionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginDescriptionReply_descriptor_;
}

const PluginDescriptionReply& PluginDescriptionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginDescriptionReply* PluginDescriptionReply::default_instance_ = NULL;

PluginDescriptionReply* PluginDescriptionReply::New() const {
  return new PluginDescriptionReply;
}

void PluginDescriptionReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginDescriptionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginDescriptionReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginDescriptionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginDescriptionReply)
  return false;
#undef DO_
}

void PluginDescriptionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginDescriptionReply)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginDescriptionReply)
}

::google::protobuf::uint8* PluginDescriptionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginDescriptionReply)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginDescriptionReply)
  return target;
}

int PluginDescriptionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginDescriptionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginDescriptionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginDescriptionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginDescriptionReply::MergeFrom(const PluginDescriptionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginDescriptionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginDescriptionReply::CopyFrom(const PluginDescriptionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginDescriptionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PluginDescriptionReply::Swap(PluginDescriptionReply* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginDescriptionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginDescriptionReply_descriptor_;
  metadata.reflection = PluginDescriptionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginStateRequest::kPluginIdFieldNumber;
#endif  // !_MSC_VER

PluginStateRequest::PluginStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginStateRequest)
}

void PluginStateRequest::InitAsDefaultInstance() {
}

PluginStateRequest::PluginStateRequest(const PluginStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateRequest)
}

void PluginStateRequest::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginStateRequest::~PluginStateRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateRequest)
  SharedDtor();
}

void PluginStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginStateRequest_descriptor_;
}

const PluginStateRequest& PluginStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginStateRequest* PluginStateRequest::default_instance_ = NULL;

PluginStateRequest* PluginStateRequest::New() const {
  return new PluginStateRequest;
}

void PluginStateRequest::Clear() {
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plugin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginStateRequest)
  return false;
#undef DO_
}

void PluginStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginStateRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plugin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginStateRequest)
}

::google::protobuf::uint8* PluginStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plugin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateRequest)
  return target;
}

int PluginStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginStateRequest::MergeFrom(const PluginStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateRequest::CopyFrom(const PluginStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PluginStateRequest::Swap(PluginStateRequest* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginStateRequest_descriptor_;
  metadata.reflection = PluginStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginStateReply::kNameFieldNumber;
const int PluginStateReply::kEnabledFieldNumber;
const int PluginStateReply::kActiveFieldNumber;
const int PluginStateReply::kPreferencesSourceFieldNumber;
const int PluginStateReply::kConflictsWithFieldNumber;
#endif  // !_MSC_VER

PluginStateReply::PluginStateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginStateReply)
}

void PluginStateReply::InitAsDefaultInstance() {
}

PluginStateReply::PluginStateReply(const PluginStateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateReply)
}

void PluginStateReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  active_ = false;
  preferences_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginStateReply::~PluginStateReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateReply)
  SharedDtor();
}

void PluginStateReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (preferences_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferences_source_;
  }
  if (this != default_instance_) {
  }
}

void PluginStateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginStateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginStateReply_descriptor_;
}

const PluginStateReply& PluginStateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginStateReply* PluginStateReply::default_instance_ = NULL;

PluginStateReply* PluginStateReply::New() const {
  return new PluginStateReply;
}

void PluginStateReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PluginStateReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(enabled_, active_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_preferences_source()) {
      if (preferences_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preferences_source_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  conflicts_with_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginStateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginStateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // required bool enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // required bool active = 3;
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_preferences_source;
        break;
      }

      // required string preferences_source = 4;
      case 4: {
        if (tag == 34) {
         parse_preferences_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferences_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferences_source().data(), this->preferences_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferences_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conflicts_with;
        break;
      }

      // repeated .ola.proto.PluginInfo conflicts_with = 5;
      case 5: {
        if (tag == 42) {
         parse_conflicts_with:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conflicts_with()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conflicts_with;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginStateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginStateReply)
  return false;
#undef DO_
}

void PluginStateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginStateReply)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // required bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // required string preferences_source = 4;
  if (has_preferences_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferences_source().data(), this->preferences_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferences_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preferences_source(), output);
  }

  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  for (int i = 0; i < this->conflicts_with_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->conflicts_with(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginStateReply)
}

::google::protobuf::uint8* PluginStateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateReply)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bool enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // required bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // required string preferences_source = 4;
  if (has_preferences_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferences_source().data(), this->preferences_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferences_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preferences_source(), target);
  }

  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  for (int i = 0; i < this->conflicts_with_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conflicts_with(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateReply)
  return target;
}

int PluginStateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // required bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required string preferences_source = 4;
    if (has_preferences_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferences_source());
    }

  }
  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  total_size += 1 * this->conflicts_with_size();
  for (int i = 0; i < this->conflicts_with_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conflicts_with(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginStateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginStateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginStateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginStateReply::MergeFrom(const PluginStateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  conflicts_with_.MergeFrom(from.conflicts_with_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_preferences_source()) {
      set_preferences_source(from.preferences_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginStateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateReply::CopyFrom(const PluginStateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conflicts_with())) return false;
  return true;
}

void PluginStateReply::Swap(PluginStateReply* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(active_, other->active_);
    std::swap(preferences_source_, other->preferences_source_);
    conflicts_with_.Swap(&other->conflicts_with_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginStateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginStateReply_descriptor_;
  metadata.reflection = PluginStateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginStateChangeRequest::kPluginIdFieldNumber;
const int PluginStateChangeRequest::kEnabledFieldNumber;
#endif  // !_MSC_VER

PluginStateChangeRequest::PluginStateChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PluginStateChangeRequest)
}

void PluginStateChangeRequest::InitAsDefaultInstance() {
}

PluginStateChangeRequest::PluginStateChangeRequest(const PluginStateChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateChangeRequest)
}

void PluginStateChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginStateChangeRequest::~PluginStateChangeRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateChangeRequest)
  SharedDtor();
}

void PluginStateChangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginStateChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginStateChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginStateChangeRequest_descriptor_;
}

const PluginStateChangeRequest& PluginStateChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PluginStateChangeRequest* PluginStateChangeRequest::default_instance_ = NULL;

PluginStateChangeRequest* PluginStateChangeRequest::New() const {
  return new PluginStateChangeRequest;
}

void PluginStateChangeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PluginStateChangeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(plugin_id_, enabled_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginStateChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PluginStateChangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plugin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // required bool enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PluginStateChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PluginStateChangeRequest)
  return false;
#undef DO_
}

void PluginStateChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PluginStateChangeRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plugin_id(), output);
  }

  // required bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PluginStateChangeRequest)
}

::google::protobuf::uint8* PluginStateChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateChangeRequest)
  // required int32 plugin_id = 1;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plugin_id(), target);
  }

  // required bool enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateChangeRequest)
  return target;
}

int PluginStateChangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

    // required bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginStateChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginStateChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginStateChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginStateChangeRequest::MergeFrom(const PluginStateChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginStateChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateChangeRequest::CopyFrom(const PluginStateChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PluginStateChangeRequest::Swap(PluginStateChangeRequest* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginStateChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginStateChangeRequest_descriptor_;
  metadata.reflection = PluginStateChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfoRequest::kPluginIdFieldNumber;
#endif  // !_MSC_VER

DeviceInfoRequest::DeviceInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DeviceInfoRequest)
}

void DeviceInfoRequest::InitAsDefaultInstance() {
}

DeviceInfoRequest::DeviceInfoRequest(const DeviceInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfoRequest)
}

void DeviceInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoRequest::~DeviceInfoRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfoRequest)
  SharedDtor();
}

void DeviceInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoRequest_descriptor_;
}

const DeviceInfoRequest& DeviceInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DeviceInfoRequest* DeviceInfoRequest::default_instance_ = NULL;

DeviceInfoRequest* DeviceInfoRequest::New() const {
  return new DeviceInfoRequest;
}

void DeviceInfoRequest::Clear() {
  plugin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DeviceInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plugin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DeviceInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DeviceInfoRequest)
  return false;
#undef DO_
}

void DeviceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DeviceInfoRequest)
  // optional int32 plugin_id = 1;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plugin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DeviceInfoRequest)
}

::google::protobuf::uint8* DeviceInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfoRequest)
  // optional int32 plugin_id = 1;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plugin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfoRequest)
  return target;
}

int DeviceInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfoRequest::MergeFrom(const DeviceInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoRequest::CopyFrom(const DeviceInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoRequest::IsInitialized() const {

  return true;
}

void DeviceInfoRequest::Swap(DeviceInfoRequest* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoRequest_descriptor_;
  metadata.reflection = DeviceInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortInfo::kPortIdFieldNumber;
const int PortInfo::kPriorityCapabilityFieldNumber;
const int PortInfo::kDescriptionFieldNumber;
const int PortInfo::kUniverseFieldNumber;
const int PortInfo::kActiveFieldNumber;
const int PortInfo::kPriorityModeFieldNumber;
const int PortInfo::kPriorityFieldNumber;
const int PortInfo::kSupportsRdmFieldNumber;
#endif  // !_MSC_VER

PortInfo::PortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PortInfo)
}

void PortInfo::InitAsDefaultInstance() {
}

PortInfo::PortInfo(const PortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PortInfo)
}

void PortInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  port_id_ = 0;
  priority_capability_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  universe_ = 0;
  active_ = false;
  priority_mode_ = 0;
  priority_ = 0;
  supports_rdm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortInfo::~PortInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.PortInfo)
  SharedDtor();
}

void PortInfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void PortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortInfo_descriptor_;
}

const PortInfo& PortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PortInfo* PortInfo::default_instance_ = NULL;

PortInfo* PortInfo::New() const {
  return new PortInfo;
}

void PortInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PortInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(port_id_, priority_capability_);
    ZR_(universe_, priority_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PortInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_id_)));
          set_has_port_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priority_capability;
        break;
      }

      // required int32 priority_capability = 2;
      case 2: {
        if (tag == 16) {
         parse_priority_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_capability_)));
          set_has_priority_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_universe;
        break;
      }

      // optional int32 universe = 3;
      case 3: {
        if (tag == 24) {
         parse_universe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // required string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_priority_mode;
        break;
      }

      // optional int32 priority_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_priority_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_mode_)));
          set_has_priority_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_priority;
        break;
      }

      // optional int32 priority = 7;
      case 7: {
        if (tag == 56) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_supports_rdm;
        break;
      }

      // optional bool supports_rdm = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_supports_rdm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_rdm_)));
          set_has_supports_rdm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PortInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PortInfo)
  return false;
#undef DO_
}

void PortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PortInfo)
  // required int32 port_id = 1;
  if (has_port_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port_id(), output);
  }

  // required int32 priority_capability = 2;
  if (has_priority_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->priority_capability(), output);
  }

  // optional int32 universe = 3;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->universe(), output);
  }

  // optional bool active = 4;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional int32 priority_mode = 6;
  if (has_priority_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority_mode(), output);
  }

  // optional int32 priority = 7;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->priority(), output);
  }

  // optional bool supports_rdm = 8 [default = false];
  if (has_supports_rdm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->supports_rdm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PortInfo)
}

::google::protobuf::uint8* PortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PortInfo)
  // required int32 port_id = 1;
  if (has_port_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port_id(), target);
  }

  // required int32 priority_capability = 2;
  if (has_priority_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->priority_capability(), target);
  }

  // optional int32 universe = 3;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->universe(), target);
  }

  // optional bool active = 4;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional int32 priority_mode = 6;
  if (has_priority_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority_mode(), target);
  }

  // optional int32 priority = 7;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->priority(), target);
  }

  // optional bool supports_rdm = 8 [default = false];
  if (has_supports_rdm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->supports_rdm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PortInfo)
  return target;
}

int PortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port_id = 1;
    if (has_port_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_id());
    }

    // required int32 priority_capability = 2;
    if (has_priority_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_capability());
    }

    // required string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 universe = 3;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 priority_mode = 6;
    if (has_priority_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_mode());
    }

    // optional int32 priority = 7;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool supports_rdm = 8 [default = false];
    if (has_supports_rdm()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortInfo::MergeFrom(const PortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_id()) {
      set_port_id(from.port_id());
    }
    if (from.has_priority_capability()) {
      set_priority_capability(from.priority_capability());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_priority_mode()) {
      set_priority_mode(from.priority_mode());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_supports_rdm()) {
      set_supports_rdm(from.supports_rdm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortInfo::CopyFrom(const PortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PortInfo::Swap(PortInfo* other) {
  if (other != this) {
    std::swap(port_id_, other->port_id_);
    std::swap(priority_capability_, other->priority_capability_);
    std::swap(description_, other->description_);
    std::swap(universe_, other->universe_);
    std::swap(active_, other->active_);
    std::swap(priority_mode_, other->priority_mode_);
    std::swap(priority_, other->priority_);
    std::swap(supports_rdm_, other->supports_rdm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortInfo_descriptor_;
  metadata.reflection = PortInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kDeviceAliasFieldNumber;
const int DeviceInfo::kPluginIdFieldNumber;
const int DeviceInfo::kDeviceNameFieldNumber;
const int DeviceInfo::kInputPortFieldNumber;
const int DeviceInfo::kOutputPortFieldNumber;
const int DeviceInfo::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_alias_ = 0;
  plugin_id_ = 0;
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_name_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(device_alias_, plugin_id_);
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_name_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  input_port_.Clear();
  output_port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 device_alias = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_alias_)));
          set_has_device_alias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plugin_id;
        break;
      }

      // required int32 plugin_id = 2;
      case 2: {
        if (tag == 16) {
         parse_plugin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plugin_id_)));
          set_has_plugin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_name;
        break;
      }

      // required string device_name = 3;
      case 3: {
        if (tag == 26) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_port;
        break;
      }

      // repeated .ola.proto.PortInfo input_port = 4;
      case 4: {
        if (tag == 34) {
         parse_input_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_port()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_port;
        if (input->ExpectTag(42)) goto parse_output_port;
        break;
      }

      // repeated .ola.proto.PortInfo output_port = 5;
      case 5: {
        if (tag == 42) {
         parse_output_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_port()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_port;
        if (input->ExpectTag(50)) goto parse_device_id;
        break;
      }

      // required string device_id = 6;
      case 6: {
        if (tag == 50) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DeviceInfo)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_alias(), output);
  }

  // required int32 plugin_id = 2;
  if (has_plugin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plugin_id(), output);
  }

  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_name(), output);
  }

  // repeated .ola.proto.PortInfo input_port = 4;
  for (int i = 0; i < this->input_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input_port(i), output);
  }

  // repeated .ola.proto.PortInfo output_port = 5;
  for (int i = 0; i < this->output_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output_port(i), output);
  }

  // required string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfo)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_alias(), target);
  }

  // required int32 plugin_id = 2;
  if (has_plugin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plugin_id(), target);
  }

  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }

  // repeated .ola.proto.PortInfo input_port = 4;
  for (int i = 0; i < this->input_port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->input_port(i), target);
  }

  // repeated .ola.proto.PortInfo output_port = 5;
  for (int i = 0; i < this->output_port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output_port(i), target);
  }

  // required string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfo)
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 device_alias = 1;
    if (has_device_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_alias());
    }

    // required int32 plugin_id = 2;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plugin_id());
    }

    // required string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // required string device_id = 6;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  // repeated .ola.proto.PortInfo input_port = 4;
  total_size += 1 * this->input_port_size();
  for (int i = 0; i < this->input_port_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_port(i));
  }

  // repeated .ola.proto.PortInfo output_port = 5;
  total_size += 1 * this->output_port_size();
  for (int i = 0; i < this->output_port_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_port(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_port_.MergeFrom(from.input_port_);
  output_port_.MergeFrom(from.output_port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_alias()) {
      set_device_alias(from.device_alias());
    }
    if (from.has_plugin_id()) {
      set_plugin_id(from.plugin_id());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->input_port())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->output_port())) return false;
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(device_alias_, other->device_alias_);
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(device_name_, other->device_name_);
    input_port_.Swap(&other->input_port_);
    output_port_.Swap(&other->output_port_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfoReply::kDeviceFieldNumber;
#endif  // !_MSC_VER

DeviceInfoReply::DeviceInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DeviceInfoReply)
}

void DeviceInfoReply::InitAsDefaultInstance() {
}

DeviceInfoReply::DeviceInfoReply(const DeviceInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfoReply)
}

void DeviceInfoReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoReply::~DeviceInfoReply() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfoReply)
  SharedDtor();
}

void DeviceInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoReply_descriptor_;
}

const DeviceInfoReply& DeviceInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DeviceInfoReply* DeviceInfoReply::default_instance_ = NULL;

DeviceInfoReply* DeviceInfoReply::New() const {
  return new DeviceInfoReply;
}

void DeviceInfoReply::Clear() {
  device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DeviceInfoReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.proto.DeviceInfo device = 1;
      case 1: {
        if (tag == 10) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_device;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DeviceInfoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DeviceInfoReply)
  return false;
#undef DO_
}

void DeviceInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DeviceInfoReply)
  // repeated .ola.proto.DeviceInfo device = 1;
  for (int i = 0; i < this->device_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DeviceInfoReply)
}

::google::protobuf::uint8* DeviceInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfoReply)
  // repeated .ola.proto.DeviceInfo device = 1;
  for (int i = 0; i < this->device_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfoReply)
  return target;
}

int DeviceInfoReply::ByteSize() const {
  int total_size = 0;

  // repeated .ola.proto.DeviceInfo device = 1;
  total_size += 1 * this->device_size();
  for (int i = 0; i < this->device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfoReply::MergeFrom(const DeviceInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_.MergeFrom(from.device_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoReply::CopyFrom(const DeviceInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->device())) return false;
  return true;
}

void DeviceInfoReply::Swap(DeviceInfoReply* other) {
  if (other != this) {
    device_.Swap(&other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoReply_descriptor_;
  metadata.reflection = DeviceInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DmxData::kUniverseFieldNumber;
const int DmxData::kDataFieldNumber;
const int DmxData::kPriorityFieldNumber;
#endif  // !_MSC_VER

DmxData::DmxData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DmxData)
}

void DmxData::InitAsDefaultInstance() {
}

DmxData::DmxData(const DmxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DmxData)
}

void DmxData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  universe_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DmxData::~DmxData() {
  // @@protoc_insertion_point(destructor:ola.proto.DmxData)
  SharedDtor();
}

void DmxData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DmxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DmxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DmxData_descriptor_;
}

const DmxData& DmxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DmxData* DmxData::default_instance_ = NULL;

DmxData* DmxData::New() const {
  return new DmxData;
}

void DmxData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DmxData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(universe_, priority_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DmxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DmxData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DmxData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DmxData)
  return false;
#undef DO_
}

void DmxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DmxData)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DmxData)
}

::google::protobuf::uint8* DmxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DmxData)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DmxData)
  return target;
}

int DmxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DmxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DmxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DmxData::MergeFrom(const DmxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DmxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmxData::CopyFrom(const DmxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmxData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DmxData::Swap(DmxData* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(data_, other->data_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DmxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DmxData_descriptor_;
  metadata.reflection = DmxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterDmxRequest::kUniverseFieldNumber;
const int RegisterDmxRequest::kActionFieldNumber;
#endif  // !_MSC_VER

RegisterDmxRequest::RegisterDmxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RegisterDmxRequest)
}

void RegisterDmxRequest::InitAsDefaultInstance() {
}

RegisterDmxRequest::RegisterDmxRequest(const RegisterDmxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RegisterDmxRequest)
}

void RegisterDmxRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterDmxRequest::~RegisterDmxRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RegisterDmxRequest)
  SharedDtor();
}

void RegisterDmxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterDmxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterDmxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterDmxRequest_descriptor_;
}

const RegisterDmxRequest& RegisterDmxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RegisterDmxRequest* RegisterDmxRequest::default_instance_ = NULL;

RegisterDmxRequest* RegisterDmxRequest::New() const {
  return new RegisterDmxRequest;
}

void RegisterDmxRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    universe_ = 0;
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterDmxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RegisterDmxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // required .ola.proto.RegisterAction action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::RegisterAction_IsValid(value)) {
            set_action(static_cast< ::ola::proto::RegisterAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RegisterDmxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RegisterDmxRequest)
  return false;
#undef DO_
}

void RegisterDmxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RegisterDmxRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required .ola.proto.RegisterAction action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RegisterDmxRequest)
}

::google::protobuf::uint8* RegisterDmxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RegisterDmxRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required .ola.proto.RegisterAction action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RegisterDmxRequest)
  return target;
}

int RegisterDmxRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required .ola.proto.RegisterAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterDmxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterDmxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterDmxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterDmxRequest::MergeFrom(const RegisterDmxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterDmxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterDmxRequest::CopyFrom(const RegisterDmxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDmxRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegisterDmxRequest::Swap(RegisterDmxRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterDmxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterDmxRequest_descriptor_;
  metadata.reflection = RegisterDmxRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatchPortRequest::kUniverseFieldNumber;
const int PatchPortRequest::kDeviceAliasFieldNumber;
const int PatchPortRequest::kPortIdFieldNumber;
const int PatchPortRequest::kActionFieldNumber;
const int PatchPortRequest::kIsOutputFieldNumber;
#endif  // !_MSC_VER

PatchPortRequest::PatchPortRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PatchPortRequest)
}

void PatchPortRequest::InitAsDefaultInstance() {
}

PatchPortRequest::PatchPortRequest(const PatchPortRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PatchPortRequest)
}

void PatchPortRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  device_alias_ = 0;
  port_id_ = 0;
  action_ = 1;
  is_output_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatchPortRequest::~PatchPortRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PatchPortRequest)
  SharedDtor();
}

void PatchPortRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PatchPortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatchPortRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatchPortRequest_descriptor_;
}

const PatchPortRequest& PatchPortRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PatchPortRequest* PatchPortRequest::default_instance_ = NULL;

PatchPortRequest* PatchPortRequest::New() const {
  return new PatchPortRequest;
}

void PatchPortRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PatchPortRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(universe_, port_id_);
    action_ = 1;
    is_output_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatchPortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PatchPortRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_alias;
        break;
      }

      // required int32 device_alias = 2;
      case 2: {
        if (tag == 16) {
         parse_device_alias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_alias_)));
          set_has_device_alias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port_id;
        break;
      }

      // required int32 port_id = 3;
      case 3: {
        if (tag == 24) {
         parse_port_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_id_)));
          set_has_port_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // required .ola.proto.PatchAction action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::PatchAction_IsValid(value)) {
            set_action(static_cast< ::ola::proto::PatchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_output;
        break;
      }

      // required bool is_output = 5;
      case 5: {
        if (tag == 40) {
         parse_is_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_output_)));
          set_has_is_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PatchPortRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PatchPortRequest)
  return false;
#undef DO_
}

void PatchPortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PatchPortRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required int32 device_alias = 2;
  if (has_device_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_alias(), output);
  }

  // required int32 port_id = 3;
  if (has_port_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_id(), output);
  }

  // required .ola.proto.PatchAction action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // required bool is_output = 5;
  if (has_is_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PatchPortRequest)
}

::google::protobuf::uint8* PatchPortRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PatchPortRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required int32 device_alias = 2;
  if (has_device_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_alias(), target);
  }

  // required int32 port_id = 3;
  if (has_port_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_id(), target);
  }

  // required .ola.proto.PatchAction action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // required bool is_output = 5;
  if (has_is_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PatchPortRequest)
  return target;
}

int PatchPortRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required int32 device_alias = 2;
    if (has_device_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_alias());
    }

    // required int32 port_id = 3;
    if (has_port_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_id());
    }

    // required .ola.proto.PatchAction action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required bool is_output = 5;
    if (has_is_output()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatchPortRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatchPortRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatchPortRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatchPortRequest::MergeFrom(const PatchPortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_device_alias()) {
      set_device_alias(from.device_alias());
    }
    if (from.has_port_id()) {
      set_port_id(from.port_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_is_output()) {
      set_is_output(from.is_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatchPortRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchPortRequest::CopyFrom(const PatchPortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchPortRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PatchPortRequest::Swap(PatchPortRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(device_alias_, other->device_alias_);
    std::swap(port_id_, other->port_id_);
    std::swap(action_, other->action_);
    std::swap(is_output_, other->is_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatchPortRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatchPortRequest_descriptor_;
  metadata.reflection = PatchPortRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniverseNameRequest::kUniverseFieldNumber;
const int UniverseNameRequest::kNameFieldNumber;
#endif  // !_MSC_VER

UniverseNameRequest::UniverseNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UniverseNameRequest)
}

void UniverseNameRequest::InitAsDefaultInstance() {
}

UniverseNameRequest::UniverseNameRequest(const UniverseNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseNameRequest)
}

void UniverseNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  universe_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniverseNameRequest::~UniverseNameRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseNameRequest)
  SharedDtor();
}

void UniverseNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UniverseNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniverseNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniverseNameRequest_descriptor_;
}

const UniverseNameRequest& UniverseNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UniverseNameRequest* UniverseNameRequest::default_instance_ = NULL;

UniverseNameRequest* UniverseNameRequest::New() const {
  return new UniverseNameRequest;
}

void UniverseNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    universe_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniverseNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UniverseNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UniverseNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UniverseNameRequest)
  return false;
#undef DO_
}

void UniverseNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UniverseNameRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UniverseNameRequest)
}

::google::protobuf::uint8* UniverseNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseNameRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseNameRequest)
  return target;
}

int UniverseNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniverseNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniverseNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniverseNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniverseNameRequest::MergeFrom(const UniverseNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniverseNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseNameRequest::CopyFrom(const UniverseNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UniverseNameRequest::Swap(UniverseNameRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniverseNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniverseNameRequest_descriptor_;
  metadata.reflection = UniverseNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeModeRequest::kUniverseFieldNumber;
const int MergeModeRequest::kMergeModeFieldNumber;
#endif  // !_MSC_VER

MergeModeRequest::MergeModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.MergeModeRequest)
}

void MergeModeRequest::InitAsDefaultInstance() {
}

MergeModeRequest::MergeModeRequest(const MergeModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.MergeModeRequest)
}

void MergeModeRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  merge_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeModeRequest::~MergeModeRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.MergeModeRequest)
  SharedDtor();
}

void MergeModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MergeModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeModeRequest_descriptor_;
}

const MergeModeRequest& MergeModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

MergeModeRequest* MergeModeRequest::default_instance_ = NULL;

MergeModeRequest* MergeModeRequest::New() const {
  return new MergeModeRequest;
}

void MergeModeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    universe_ = 0;
    merge_mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.MergeModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_merge_mode;
        break;
      }

      // required .ola.proto.MergeMode merge_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_merge_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::MergeMode_IsValid(value)) {
            set_merge_mode(static_cast< ::ola::proto::MergeMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.MergeModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.MergeModeRequest)
  return false;
#undef DO_
}

void MergeModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.MergeModeRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required .ola.proto.MergeMode merge_mode = 2;
  if (has_merge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->merge_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.MergeModeRequest)
}

::google::protobuf::uint8* MergeModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.MergeModeRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required .ola.proto.MergeMode merge_mode = 2;
  if (has_merge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->merge_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.MergeModeRequest)
  return target;
}

int MergeModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required .ola.proto.MergeMode merge_mode = 2;
    if (has_merge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->merge_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeModeRequest::MergeFrom(const MergeModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_merge_mode()) {
      set_merge_mode(from.merge_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeModeRequest::CopyFrom(const MergeModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MergeModeRequest::Swap(MergeModeRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(merge_mode_, other->merge_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeModeRequest_descriptor_;
  metadata.reflection = MergeModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionalUniverseRequest::kUniverseFieldNumber;
#endif  // !_MSC_VER

OptionalUniverseRequest::OptionalUniverseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.OptionalUniverseRequest)
}

void OptionalUniverseRequest::InitAsDefaultInstance() {
}

OptionalUniverseRequest::OptionalUniverseRequest(const OptionalUniverseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.OptionalUniverseRequest)
}

void OptionalUniverseRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalUniverseRequest::~OptionalUniverseRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.OptionalUniverseRequest)
  SharedDtor();
}

void OptionalUniverseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptionalUniverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalUniverseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalUniverseRequest_descriptor_;
}

const OptionalUniverseRequest& OptionalUniverseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

OptionalUniverseRequest* OptionalUniverseRequest::default_instance_ = NULL;

OptionalUniverseRequest* OptionalUniverseRequest::New() const {
  return new OptionalUniverseRequest;
}

void OptionalUniverseRequest::Clear() {
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionalUniverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.OptionalUniverseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.OptionalUniverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.OptionalUniverseRequest)
  return false;
#undef DO_
}

void OptionalUniverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.OptionalUniverseRequest)
  // optional int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.OptionalUniverseRequest)
}

::google::protobuf::uint8* OptionalUniverseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.OptionalUniverseRequest)
  // optional int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.OptionalUniverseRequest)
  return target;
}

int OptionalUniverseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalUniverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionalUniverseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionalUniverseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionalUniverseRequest::MergeFrom(const OptionalUniverseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionalUniverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalUniverseRequest::CopyFrom(const OptionalUniverseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalUniverseRequest::IsInitialized() const {

  return true;
}

void OptionalUniverseRequest::Swap(OptionalUniverseRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionalUniverseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalUniverseRequest_descriptor_;
  metadata.reflection = OptionalUniverseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniverseInfo::kUniverseFieldNumber;
const int UniverseInfo::kNameFieldNumber;
const int UniverseInfo::kMergeModeFieldNumber;
const int UniverseInfo::kInputPortCountFieldNumber;
const int UniverseInfo::kOutputPortCountFieldNumber;
const int UniverseInfo::kRdmDevicesFieldNumber;
const int UniverseInfo::kInputPortsFieldNumber;
const int UniverseInfo::kOutputPortsFieldNumber;
#endif  // !_MSC_VER

UniverseInfo::UniverseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UniverseInfo)
}

void UniverseInfo::InitAsDefaultInstance() {
}

UniverseInfo::UniverseInfo(const UniverseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseInfo)
}

void UniverseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  universe_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_mode_ = 1;
  input_port_count_ = 0;
  output_port_count_ = 0;
  rdm_devices_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniverseInfo::~UniverseInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseInfo)
  SharedDtor();
}

void UniverseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UniverseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniverseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniverseInfo_descriptor_;
}

const UniverseInfo& UniverseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UniverseInfo* UniverseInfo::default_instance_ = NULL;

UniverseInfo* UniverseInfo::New() const {
  return new UniverseInfo;
}

void UniverseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UniverseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(input_port_count_, output_port_count_);
    universe_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    merge_mode_ = 1;
    rdm_devices_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  input_ports_.Clear();
  output_ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniverseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UniverseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_merge_mode;
        break;
      }

      // required .ola.proto.MergeMode merge_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_merge_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::MergeMode_IsValid(value)) {
            set_merge_mode(static_cast< ::ola::proto::MergeMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_port_count;
        break;
      }

      // required int32 input_port_count = 4;
      case 4: {
        if (tag == 32) {
         parse_input_port_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_port_count_)));
          set_has_input_port_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_output_port_count;
        break;
      }

      // required int32 output_port_count = 5;
      case 5: {
        if (tag == 40) {
         parse_output_port_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_port_count_)));
          set_has_output_port_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rdm_devices;
        break;
      }

      // required int32 rdm_devices = 6;
      case 6: {
        if (tag == 48) {
         parse_rdm_devices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rdm_devices_)));
          set_has_rdm_devices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_input_ports;
        break;
      }

      // repeated .ola.proto.PortInfo input_ports = 7;
      case 7: {
        if (tag == 58) {
         parse_input_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_input_ports;
        if (input->ExpectTag(66)) goto parse_output_ports;
        break;
      }

      // repeated .ola.proto.PortInfo output_ports = 8;
      case 8: {
        if (tag == 66) {
         parse_output_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_output_ports;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UniverseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UniverseInfo)
  return false;
#undef DO_
}

void UniverseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UniverseInfo)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .ola.proto.MergeMode merge_mode = 3;
  if (has_merge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->merge_mode(), output);
  }

  // required int32 input_port_count = 4;
  if (has_input_port_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_port_count(), output);
  }

  // required int32 output_port_count = 5;
  if (has_output_port_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->output_port_count(), output);
  }

  // required int32 rdm_devices = 6;
  if (has_rdm_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rdm_devices(), output);
  }

  // repeated .ola.proto.PortInfo input_ports = 7;
  for (int i = 0; i < this->input_ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->input_ports(i), output);
  }

  // repeated .ola.proto.PortInfo output_ports = 8;
  for (int i = 0; i < this->output_ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->output_ports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UniverseInfo)
}

::google::protobuf::uint8* UniverseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseInfo)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .ola.proto.MergeMode merge_mode = 3;
  if (has_merge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->merge_mode(), target);
  }

  // required int32 input_port_count = 4;
  if (has_input_port_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_port_count(), target);
  }

  // required int32 output_port_count = 5;
  if (has_output_port_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->output_port_count(), target);
  }

  // required int32 rdm_devices = 6;
  if (has_rdm_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rdm_devices(), target);
  }

  // repeated .ola.proto.PortInfo input_ports = 7;
  for (int i = 0; i < this->input_ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->input_ports(i), target);
  }

  // repeated .ola.proto.PortInfo output_ports = 8;
  for (int i = 0; i < this->output_ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->output_ports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseInfo)
  return target;
}

int UniverseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .ola.proto.MergeMode merge_mode = 3;
    if (has_merge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->merge_mode());
    }

    // required int32 input_port_count = 4;
    if (has_input_port_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_port_count());
    }

    // required int32 output_port_count = 5;
    if (has_output_port_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_port_count());
    }

    // required int32 rdm_devices = 6;
    if (has_rdm_devices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rdm_devices());
    }

  }
  // repeated .ola.proto.PortInfo input_ports = 7;
  total_size += 1 * this->input_ports_size();
  for (int i = 0; i < this->input_ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_ports(i));
  }

  // repeated .ola.proto.PortInfo output_ports = 8;
  total_size += 1 * this->output_ports_size();
  for (int i = 0; i < this->output_ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_ports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniverseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniverseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniverseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniverseInfo::MergeFrom(const UniverseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_ports_.MergeFrom(from.input_ports_);
  output_ports_.MergeFrom(from.output_ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_merge_mode()) {
      set_merge_mode(from.merge_mode());
    }
    if (from.has_input_port_count()) {
      set_input_port_count(from.input_port_count());
    }
    if (from.has_output_port_count()) {
      set_output_port_count(from.output_port_count());
    }
    if (from.has_rdm_devices()) {
      set_rdm_devices(from.rdm_devices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniverseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseInfo::CopyFrom(const UniverseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->input_ports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->output_ports())) return false;
  return true;
}

void UniverseInfo::Swap(UniverseInfo* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(name_, other->name_);
    std::swap(merge_mode_, other->merge_mode_);
    std::swap(input_port_count_, other->input_port_count_);
    std::swap(output_port_count_, other->output_port_count_);
    std::swap(rdm_devices_, other->rdm_devices_);
    input_ports_.Swap(&other->input_ports_);
    output_ports_.Swap(&other->output_ports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniverseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniverseInfo_descriptor_;
  metadata.reflection = UniverseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniverseInfoReply::kUniverseFieldNumber;
#endif  // !_MSC_VER

UniverseInfoReply::UniverseInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UniverseInfoReply)
}

void UniverseInfoReply::InitAsDefaultInstance() {
}

UniverseInfoReply::UniverseInfoReply(const UniverseInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseInfoReply)
}

void UniverseInfoReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniverseInfoReply::~UniverseInfoReply() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseInfoReply)
  SharedDtor();
}

void UniverseInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniverseInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniverseInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniverseInfoReply_descriptor_;
}

const UniverseInfoReply& UniverseInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UniverseInfoReply* UniverseInfoReply::default_instance_ = NULL;

UniverseInfoReply* UniverseInfoReply::New() const {
  return new UniverseInfoReply;
}

void UniverseInfoReply::Clear() {
  universe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniverseInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UniverseInfoReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.proto.UniverseInfo universe = 1;
      case 1: {
        if (tag == 10) {
         parse_universe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_universe;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UniverseInfoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UniverseInfoReply)
  return false;
#undef DO_
}

void UniverseInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UniverseInfoReply)
  // repeated .ola.proto.UniverseInfo universe = 1;
  for (int i = 0; i < this->universe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->universe(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UniverseInfoReply)
}

::google::protobuf::uint8* UniverseInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseInfoReply)
  // repeated .ola.proto.UniverseInfo universe = 1;
  for (int i = 0; i < this->universe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->universe(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseInfoReply)
  return target;
}

int UniverseInfoReply::ByteSize() const {
  int total_size = 0;

  // repeated .ola.proto.UniverseInfo universe = 1;
  total_size += 1 * this->universe_size();
  for (int i = 0; i < this->universe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->universe(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniverseInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniverseInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniverseInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniverseInfoReply::MergeFrom(const UniverseInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  universe_.MergeFrom(from.universe_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniverseInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseInfoReply::CopyFrom(const UniverseInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseInfoReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->universe())) return false;
  return true;
}

void UniverseInfoReply::Swap(UniverseInfoReply* other) {
  if (other != this) {
    universe_.Swap(&other->universe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniverseInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniverseInfoReply_descriptor_;
  metadata.reflection = UniverseInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortPriorityRequest::kDeviceAliasFieldNumber;
const int PortPriorityRequest::kIsOutputFieldNumber;
const int PortPriorityRequest::kPortIdFieldNumber;
const int PortPriorityRequest::kPriorityModeFieldNumber;
const int PortPriorityRequest::kPriorityFieldNumber;
#endif  // !_MSC_VER

PortPriorityRequest::PortPriorityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.PortPriorityRequest)
}

void PortPriorityRequest::InitAsDefaultInstance() {
}

PortPriorityRequest::PortPriorityRequest(const PortPriorityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PortPriorityRequest)
}

void PortPriorityRequest::SharedCtor() {
  _cached_size_ = 0;
  device_alias_ = 0;
  is_output_ = false;
  port_id_ = 0;
  priority_mode_ = 0;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortPriorityRequest::~PortPriorityRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PortPriorityRequest)
  SharedDtor();
}

void PortPriorityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortPriorityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortPriorityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortPriorityRequest_descriptor_;
}

const PortPriorityRequest& PortPriorityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

PortPriorityRequest* PortPriorityRequest::default_instance_ = NULL;

PortPriorityRequest* PortPriorityRequest::New() const {
  return new PortPriorityRequest;
}

void PortPriorityRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PortPriorityRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(device_alias_, priority_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortPriorityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.PortPriorityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 device_alias = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_alias_)));
          set_has_device_alias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_output;
        break;
      }

      // required bool is_output = 2;
      case 2: {
        if (tag == 16) {
         parse_is_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_output_)));
          set_has_is_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port_id;
        break;
      }

      // required int32 port_id = 3;
      case 3: {
        if (tag == 24) {
         parse_port_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_id_)));
          set_has_port_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority_mode;
        break;
      }

      // required int32 priority_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_priority_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_mode_)));
          set_has_priority_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // optional int32 priority = 5;
      case 5: {
        if (tag == 40) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.PortPriorityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.PortPriorityRequest)
  return false;
#undef DO_
}

void PortPriorityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.PortPriorityRequest)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_alias(), output);
  }

  // required bool is_output = 2;
  if (has_is_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_output(), output);
  }

  // required int32 port_id = 3;
  if (has_port_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_id(), output);
  }

  // required int32 priority_mode = 4;
  if (has_priority_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority_mode(), output);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.PortPriorityRequest)
}

::google::protobuf::uint8* PortPriorityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PortPriorityRequest)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_alias(), target);
  }

  // required bool is_output = 2;
  if (has_is_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_output(), target);
  }

  // required int32 port_id = 3;
  if (has_port_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_id(), target);
  }

  // required int32 priority_mode = 4;
  if (has_priority_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority_mode(), target);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PortPriorityRequest)
  return target;
}

int PortPriorityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 device_alias = 1;
    if (has_device_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_alias());
    }

    // required bool is_output = 2;
    if (has_is_output()) {
      total_size += 1 + 1;
    }

    // required int32 port_id = 3;
    if (has_port_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_id());
    }

    // required int32 priority_mode = 4;
    if (has_priority_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_mode());
    }

    // optional int32 priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortPriorityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortPriorityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortPriorityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortPriorityRequest::MergeFrom(const PortPriorityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_alias()) {
      set_device_alias(from.device_alias());
    }
    if (from.has_is_output()) {
      set_is_output(from.is_output());
    }
    if (from.has_port_id()) {
      set_port_id(from.port_id());
    }
    if (from.has_priority_mode()) {
      set_priority_mode(from.priority_mode());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortPriorityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortPriorityRequest::CopyFrom(const PortPriorityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortPriorityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PortPriorityRequest::Swap(PortPriorityRequest* other) {
  if (other != this) {
    std::swap(device_alias_, other->device_alias_);
    std::swap(is_output_, other->is_output_);
    std::swap(port_id_, other->port_id_);
    std::swap(priority_mode_, other->priority_mode_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortPriorityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortPriorityRequest_descriptor_;
  metadata.reflection = PortPriorityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceConfigRequest::kDeviceAliasFieldNumber;
const int DeviceConfigRequest::kDataFieldNumber;
#endif  // !_MSC_VER

DeviceConfigRequest::DeviceConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DeviceConfigRequest)
}

void DeviceConfigRequest::InitAsDefaultInstance() {
}

DeviceConfigRequest::DeviceConfigRequest(const DeviceConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceConfigRequest)
}

void DeviceConfigRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_alias_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceConfigRequest::~DeviceConfigRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceConfigRequest)
  SharedDtor();
}

void DeviceConfigRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DeviceConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConfigRequest_descriptor_;
}

const DeviceConfigRequest& DeviceConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DeviceConfigRequest* DeviceConfigRequest::default_instance_ = NULL;

DeviceConfigRequest* DeviceConfigRequest::New() const {
  return new DeviceConfigRequest;
}

void DeviceConfigRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    device_alias_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DeviceConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 device_alias = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_alias_)));
          set_has_device_alias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DeviceConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DeviceConfigRequest)
  return false;
#undef DO_
}

void DeviceConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DeviceConfigRequest)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_alias(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DeviceConfigRequest)
}

::google::protobuf::uint8* DeviceConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceConfigRequest)
  // required int32 device_alias = 1;
  if (has_device_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_alias(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceConfigRequest)
  return target;
}

int DeviceConfigRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 device_alias = 1;
    if (has_device_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_alias());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceConfigRequest::MergeFrom(const DeviceConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_alias()) {
      set_device_alias(from.device_alias());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfigRequest::CopyFrom(const DeviceConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeviceConfigRequest::Swap(DeviceConfigRequest* other) {
  if (other != this) {
    std::swap(device_alias_, other->device_alias_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceConfigRequest_descriptor_;
  metadata.reflection = DeviceConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceConfigReply::kDataFieldNumber;
#endif  // !_MSC_VER

DeviceConfigReply::DeviceConfigReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DeviceConfigReply)
}

void DeviceConfigReply::InitAsDefaultInstance() {
}

DeviceConfigReply::DeviceConfigReply(const DeviceConfigReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceConfigReply)
}

void DeviceConfigReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceConfigReply::~DeviceConfigReply() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceConfigReply)
  SharedDtor();
}

void DeviceConfigReply::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DeviceConfigReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceConfigReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConfigReply_descriptor_;
}

const DeviceConfigReply& DeviceConfigReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DeviceConfigReply* DeviceConfigReply::default_instance_ = NULL;

DeviceConfigReply* DeviceConfigReply::New() const {
  return new DeviceConfigReply;
}

void DeviceConfigReply::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceConfigReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DeviceConfigReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DeviceConfigReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DeviceConfigReply)
  return false;
#undef DO_
}

void DeviceConfigReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DeviceConfigReply)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DeviceConfigReply)
}

::google::protobuf::uint8* DeviceConfigReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceConfigReply)
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceConfigReply)
  return target;
}

int DeviceConfigReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceConfigReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceConfigReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceConfigReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceConfigReply::MergeFrom(const DeviceConfigReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceConfigReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfigReply::CopyFrom(const DeviceConfigReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeviceConfigReply::Swap(DeviceConfigReply* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceConfigReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceConfigReply_descriptor_;
  metadata.reflection = DeviceConfigReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UID::kEstaIdFieldNumber;
const int UID::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

UID::UID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UID)
}

void UID::InitAsDefaultInstance() {
}

UID::UID(const UID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UID)
}

void UID::SharedCtor() {
  _cached_size_ = 0;
  esta_id_ = 0;
  device_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UID::~UID() {
  // @@protoc_insertion_point(destructor:ola.proto.UID)
  SharedDtor();
}

void UID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UID_descriptor_;
}

const UID& UID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UID* UID::default_instance_ = NULL;

UID* UID::New() const {
  return new UID;
}

void UID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(esta_id_, device_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 esta_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esta_id_)));
          set_has_esta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_device_id;
        break;
      }

      // required fixed32 device_id = 2;
      case 2: {
        if (tag == 21) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UID)
  return false;
#undef DO_
}

void UID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UID)
  // required int32 esta_id = 1;
  if (has_esta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->esta_id(), output);
  }

  // required fixed32 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UID)
}

::google::protobuf::uint8* UID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UID)
  // required int32 esta_id = 1;
  if (has_esta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->esta_id(), target);
  }

  // required fixed32 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UID)
  return target;
}

int UID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 esta_id = 1;
    if (has_esta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esta_id());
    }

    // required fixed32 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UID::MergeFrom(const UID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_esta_id()) {
      set_esta_id(from.esta_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UID::CopyFrom(const UID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UID::Swap(UID* other) {
  if (other != this) {
    std::swap(esta_id_, other->esta_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UID_descriptor_;
  metadata.reflection = UID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniverseRequest::kUniverseFieldNumber;
#endif  // !_MSC_VER

UniverseRequest::UniverseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UniverseRequest)
}

void UniverseRequest::InitAsDefaultInstance() {
}

UniverseRequest::UniverseRequest(const UniverseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseRequest)
}

void UniverseRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniverseRequest::~UniverseRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseRequest)
  SharedDtor();
}

void UniverseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniverseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniverseRequest_descriptor_;
}

const UniverseRequest& UniverseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UniverseRequest* UniverseRequest::default_instance_ = NULL;

UniverseRequest* UniverseRequest::New() const {
  return new UniverseRequest;
}

void UniverseRequest::Clear() {
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UniverseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UniverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UniverseRequest)
  return false;
#undef DO_
}

void UniverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UniverseRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UniverseRequest)
}

::google::protobuf::uint8* UniverseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseRequest)
  return target;
}

int UniverseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniverseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniverseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniverseRequest::MergeFrom(const UniverseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseRequest::CopyFrom(const UniverseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UniverseRequest::Swap(UniverseRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniverseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniverseRequest_descriptor_;
  metadata.reflection = UniverseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoveryRequest::kUniverseFieldNumber;
const int DiscoveryRequest::kFullFieldNumber;
#endif  // !_MSC_VER

DiscoveryRequest::DiscoveryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.DiscoveryRequest)
}

void DiscoveryRequest::InitAsDefaultInstance() {
}

DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DiscoveryRequest)
}

void DiscoveryRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  full_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryRequest::~DiscoveryRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DiscoveryRequest)
  SharedDtor();
}

void DiscoveryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscoveryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryRequest_descriptor_;
}

const DiscoveryRequest& DiscoveryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

DiscoveryRequest* DiscoveryRequest::default_instance_ = NULL;

DiscoveryRequest* DiscoveryRequest::New() const {
  return new DiscoveryRequest;
}

void DiscoveryRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiscoveryRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(universe_, full_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.DiscoveryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_full;
        break;
      }

      // required bool full = 2;
      case 2: {
        if (tag == 16) {
         parse_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_)));
          set_has_full();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.DiscoveryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.DiscoveryRequest)
  return false;
#undef DO_
}

void DiscoveryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.DiscoveryRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required bool full = 2;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->full(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.DiscoveryRequest)
}

::google::protobuf::uint8* DiscoveryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DiscoveryRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required bool full = 2;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->full(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DiscoveryRequest)
  return target;
}

int DiscoveryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required bool full = 2;
    if (has_full()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_full()) {
      set_full(from.full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DiscoveryRequest::Swap(DiscoveryRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(full_, other->full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryRequest_descriptor_;
  metadata.reflection = DiscoveryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIDListReply::kUniverseFieldNumber;
const int UIDListReply::kUidFieldNumber;
#endif  // !_MSC_VER

UIDListReply::UIDListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.UIDListReply)
}

void UIDListReply::InitAsDefaultInstance() {
}

UIDListReply::UIDListReply(const UIDListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UIDListReply)
}

void UIDListReply::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIDListReply::~UIDListReply() {
  // @@protoc_insertion_point(destructor:ola.proto.UIDListReply)
  SharedDtor();
}

void UIDListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UIDListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIDListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIDListReply_descriptor_;
}

const UIDListReply& UIDListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

UIDListReply* UIDListReply::default_instance_ = NULL;

UIDListReply* UIDListReply::New() const {
  return new UIDListReply;
}

void UIDListReply::Clear() {
  universe_ = 0;
  uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIDListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.UIDListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // repeated .ola.proto.UID uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.UIDListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.UIDListReply)
  return false;
#undef DO_
}

void UIDListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.UIDListReply)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // repeated .ola.proto.UID uid = 2;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.UIDListReply)
}

::google::protobuf::uint8* UIDListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UIDListReply)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // repeated .ola.proto.UID uid = 2;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UIDListReply)
  return target;
}

int UIDListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

  }
  // repeated .ola.proto.UID uid = 2;
  total_size += 1 * this->uid_size();
  for (int i = 0; i < this->uid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIDListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIDListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIDListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIDListReply::MergeFrom(const UIDListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIDListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIDListReply::CopyFrom(const UIDListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIDListReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->uid())) return false;
  return true;
}

void UIDListReply::Swap(UIDListReply* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    uid_.Swap(&other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIDListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIDListReply_descriptor_;
  metadata.reflection = UIDListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMRequestOverrideOptions::kSubStartCodeFieldNumber;
const int RDMRequestOverrideOptions::kMessageLengthFieldNumber;
const int RDMRequestOverrideOptions::kMessageCountFieldNumber;
const int RDMRequestOverrideOptions::kChecksumFieldNumber;
#endif  // !_MSC_VER

RDMRequestOverrideOptions::RDMRequestOverrideOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMRequestOverrideOptions)
}

void RDMRequestOverrideOptions::InitAsDefaultInstance() {
}

RDMRequestOverrideOptions::RDMRequestOverrideOptions(const RDMRequestOverrideOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMRequestOverrideOptions)
}

void RDMRequestOverrideOptions::SharedCtor() {
  _cached_size_ = 0;
  sub_start_code_ = 0u;
  message_length_ = 0u;
  message_count_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMRequestOverrideOptions::~RDMRequestOverrideOptions() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMRequestOverrideOptions)
  SharedDtor();
}

void RDMRequestOverrideOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RDMRequestOverrideOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMRequestOverrideOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMRequestOverrideOptions_descriptor_;
}

const RDMRequestOverrideOptions& RDMRequestOverrideOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMRequestOverrideOptions* RDMRequestOverrideOptions::default_instance_ = NULL;

RDMRequestOverrideOptions* RDMRequestOverrideOptions::New() const {
  return new RDMRequestOverrideOptions;
}

void RDMRequestOverrideOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDMRequestOverrideOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sub_start_code_, checksum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMRequestOverrideOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMRequestOverrideOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sub_start_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_start_code_)));
          set_has_sub_start_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_length;
        break;
      }

      // optional uint32 message_length = 2;
      case 2: {
        if (tag == 16) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 3;
      case 3: {
        if (tag == 24) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 4;
      case 4: {
        if (tag == 32) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMRequestOverrideOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMRequestOverrideOptions)
  return false;
#undef DO_
}

void RDMRequestOverrideOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMRequestOverrideOptions)
  // optional uint32 sub_start_code = 1;
  if (has_sub_start_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sub_start_code(), output);
  }

  // optional uint32 message_length = 2;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->message_length(), output);
  }

  // optional uint32 message_count = 3;
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_count(), output);
  }

  // optional uint32 checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMRequestOverrideOptions)
}

::google::protobuf::uint8* RDMRequestOverrideOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMRequestOverrideOptions)
  // optional uint32 sub_start_code = 1;
  if (has_sub_start_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sub_start_code(), target);
  }

  // optional uint32 message_length = 2;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->message_length(), target);
  }

  // optional uint32 message_count = 3;
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_count(), target);
  }

  // optional uint32 checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMRequestOverrideOptions)
  return target;
}

int RDMRequestOverrideOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sub_start_code = 1;
    if (has_sub_start_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_start_code());
    }

    // optional uint32 message_length = 2;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

    // optional uint32 message_count = 3;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

    // optional uint32 checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMRequestOverrideOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMRequestOverrideOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMRequestOverrideOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMRequestOverrideOptions::MergeFrom(const RDMRequestOverrideOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_start_code()) {
      set_sub_start_code(from.sub_start_code());
    }
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMRequestOverrideOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMRequestOverrideOptions::CopyFrom(const RDMRequestOverrideOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMRequestOverrideOptions::IsInitialized() const {

  return true;
}

void RDMRequestOverrideOptions::Swap(RDMRequestOverrideOptions* other) {
  if (other != this) {
    std::swap(sub_start_code_, other->sub_start_code_);
    std::swap(message_length_, other->message_length_);
    std::swap(message_count_, other->message_count_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMRequestOverrideOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMRequestOverrideOptions_descriptor_;
  metadata.reflection = RDMRequestOverrideOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMRequest::kUniverseFieldNumber;
const int RDMRequest::kUidFieldNumber;
const int RDMRequest::kSubDeviceFieldNumber;
const int RDMRequest::kParamIdFieldNumber;
const int RDMRequest::kDataFieldNumber;
const int RDMRequest::kIsSetFieldNumber;
const int RDMRequest::kIncludeRawResponseFieldNumber;
const int RDMRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

RDMRequest::RDMRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMRequest)
}

void RDMRequest::InitAsDefaultInstance() {
  uid_ = const_cast< ::ola::proto::UID*>(&::ola::proto::UID::default_instance());
  options_ = const_cast< ::ola::proto::RDMRequestOverrideOptions*>(&::ola::proto::RDMRequestOverrideOptions::default_instance());
}

RDMRequest::RDMRequest(const RDMRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMRequest)
}

void RDMRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  universe_ = 0;
  uid_ = NULL;
  sub_device_ = 0;
  param_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_set_ = false;
  include_raw_response_ = false;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMRequest::~RDMRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMRequest)
  SharedDtor();
}

void RDMRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete uid_;
    delete options_;
  }
}

void RDMRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMRequest_descriptor_;
}

const RDMRequest& RDMRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMRequest* RDMRequest::default_instance_ = NULL;

RDMRequest* RDMRequest::New() const {
  return new RDMRequest;
}

void RDMRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDMRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(universe_, sub_device_);
    ZR_(param_id_, include_raw_response_);
    if (has_uid()) {
      if (uid_ != NULL) uid_->::ola::proto::UID::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::ola::proto::RDMRequestOverrideOptions::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .ola.proto.UID uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_device;
        break;
      }

      // required int32 sub_device = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_device_)));
          set_has_sub_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_id;
        break;
      }

      // required int32 param_id = 4;
      case 4: {
        if (tag == 32) {
         parse_param_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_id_)));
          set_has_param_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_set;
        break;
      }

      // required bool is_set = 6;
      case 6: {
        if (tag == 48) {
         parse_is_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_set_)));
          set_has_is_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_include_raw_response;
        break;
      }

      // optional bool include_raw_response = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_include_raw_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_raw_response_)));
          set_has_include_raw_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_options;
        break;
      }

      // optional .ola.proto.RDMRequestOverrideOptions options = 8;
      case 8: {
        if (tag == 66) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMRequest)
  return false;
#undef DO_
}

void RDMRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required .ola.proto.UID uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required int32 sub_device = 3;
  if (has_sub_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sub_device(), output);
  }

  // required int32 param_id = 4;
  if (has_param_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param_id(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // required bool is_set = 6;
  if (has_is_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_set(), output);
  }

  // optional bool include_raw_response = 7 [default = false];
  if (has_include_raw_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->include_raw_response(), output);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMRequest)
}

::google::protobuf::uint8* RDMRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required .ola.proto.UID uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required int32 sub_device = 3;
  if (has_sub_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sub_device(), target);
  }

  // required int32 param_id = 4;
  if (has_param_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param_id(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // required bool is_set = 6;
  if (has_is_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_set(), target);
  }

  // optional bool include_raw_response = 7 [default = false];
  if (has_include_raw_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->include_raw_response(), target);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMRequest)
  return target;
}

int RDMRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required .ola.proto.UID uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required int32 sub_device = 3;
    if (has_sub_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_device());
    }

    // required int32 param_id = 4;
    if (has_param_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_id());
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bool is_set = 6;
    if (has_is_set()) {
      total_size += 1 + 1;
    }

    // optional bool include_raw_response = 7 [default = false];
    if (has_include_raw_response()) {
      total_size += 1 + 1;
    }

    // optional .ola.proto.RDMRequestOverrideOptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMRequest::MergeFrom(const RDMRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_uid()) {
      mutable_uid()->::ola::proto::UID::MergeFrom(from.uid());
    }
    if (from.has_sub_device()) {
      set_sub_device(from.sub_device());
    }
    if (from.has_param_id()) {
      set_param_id(from.param_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_is_set()) {
      set_is_set(from.is_set());
    }
    if (from.has_include_raw_response()) {
      set_include_raw_response(from.include_raw_response());
    }
    if (from.has_options()) {
      mutable_options()->::ola::proto::RDMRequestOverrideOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMRequest::CopyFrom(const RDMRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void RDMRequest::Swap(RDMRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(uid_, other->uid_);
    std::swap(sub_device_, other->sub_device_);
    std::swap(param_id_, other->param_id_);
    std::swap(data_, other->data_);
    std::swap(is_set_, other->is_set_);
    std::swap(include_raw_response_, other->include_raw_response_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMRequest_descriptor_;
  metadata.reflection = RDMRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMDiscoveryRequest::kUniverseFieldNumber;
const int RDMDiscoveryRequest::kUidFieldNumber;
const int RDMDiscoveryRequest::kSubDeviceFieldNumber;
const int RDMDiscoveryRequest::kParamIdFieldNumber;
const int RDMDiscoveryRequest::kDataFieldNumber;
const int RDMDiscoveryRequest::kIncludeRawResponseFieldNumber;
const int RDMDiscoveryRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

RDMDiscoveryRequest::RDMDiscoveryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMDiscoveryRequest)
}

void RDMDiscoveryRequest::InitAsDefaultInstance() {
  uid_ = const_cast< ::ola::proto::UID*>(&::ola::proto::UID::default_instance());
  options_ = const_cast< ::ola::proto::RDMRequestOverrideOptions*>(&::ola::proto::RDMRequestOverrideOptions::default_instance());
}

RDMDiscoveryRequest::RDMDiscoveryRequest(const RDMDiscoveryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMDiscoveryRequest)
}

void RDMDiscoveryRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  universe_ = 0;
  uid_ = NULL;
  sub_device_ = 0;
  param_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  include_raw_response_ = false;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMDiscoveryRequest::~RDMDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMDiscoveryRequest)
  SharedDtor();
}

void RDMDiscoveryRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete uid_;
    delete options_;
  }
}

void RDMDiscoveryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMDiscoveryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMDiscoveryRequest_descriptor_;
}

const RDMDiscoveryRequest& RDMDiscoveryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMDiscoveryRequest* RDMDiscoveryRequest::default_instance_ = NULL;

RDMDiscoveryRequest* RDMDiscoveryRequest::New() const {
  return new RDMDiscoveryRequest;
}

void RDMDiscoveryRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDMDiscoveryRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(universe_, sub_device_);
    ZR_(param_id_, include_raw_response_);
    if (has_uid()) {
      if (uid_ != NULL) uid_->::ola::proto::UID::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::ola::proto::RDMRequestOverrideOptions::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMDiscoveryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMDiscoveryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .ola.proto.UID uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_device;
        break;
      }

      // required int32 sub_device = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_device_)));
          set_has_sub_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_id;
        break;
      }

      // required int32 param_id = 4;
      case 4: {
        if (tag == 32) {
         parse_param_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_id_)));
          set_has_param_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_include_raw_response;
        break;
      }

      // optional bool include_raw_response = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_include_raw_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_raw_response_)));
          set_has_include_raw_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_options;
        break;
      }

      // optional .ola.proto.RDMRequestOverrideOptions options = 8;
      case 8: {
        if (tag == 66) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMDiscoveryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMDiscoveryRequest)
  return false;
#undef DO_
}

void RDMDiscoveryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMDiscoveryRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  // required .ola.proto.UID uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required int32 sub_device = 3;
  if (has_sub_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sub_device(), output);
  }

  // required int32 param_id = 4;
  if (has_param_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param_id(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional bool include_raw_response = 6 [default = false];
  if (has_include_raw_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_raw_response(), output);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMDiscoveryRequest)
}

::google::protobuf::uint8* RDMDiscoveryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMDiscoveryRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  // required .ola.proto.UID uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required int32 sub_device = 3;
  if (has_sub_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sub_device(), target);
  }

  // required int32 param_id = 4;
  if (has_param_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param_id(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional bool include_raw_response = 6 [default = false];
  if (has_include_raw_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_raw_response(), target);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMDiscoveryRequest)
  return target;
}

int RDMDiscoveryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

    // required .ola.proto.UID uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required int32 sub_device = 3;
    if (has_sub_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_device());
    }

    // required int32 param_id = 4;
    if (has_param_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_id());
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool include_raw_response = 6 [default = false];
    if (has_include_raw_response()) {
      total_size += 1 + 1;
    }

    // optional .ola.proto.RDMRequestOverrideOptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMDiscoveryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMDiscoveryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMDiscoveryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMDiscoveryRequest::MergeFrom(const RDMDiscoveryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_uid()) {
      mutable_uid()->::ola::proto::UID::MergeFrom(from.uid());
    }
    if (from.has_sub_device()) {
      set_sub_device(from.sub_device());
    }
    if (from.has_param_id()) {
      set_param_id(from.param_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_include_raw_response()) {
      set_include_raw_response(from.include_raw_response());
    }
    if (from.has_options()) {
      mutable_options()->::ola::proto::RDMRequestOverrideOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMDiscoveryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMDiscoveryRequest::CopyFrom(const RDMDiscoveryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMDiscoveryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void RDMDiscoveryRequest::Swap(RDMDiscoveryRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(uid_, other->uid_);
    std::swap(sub_device_, other->sub_device_);
    std::swap(param_id_, other->param_id_);
    std::swap(data_, other->data_);
    std::swap(include_raw_response_, other->include_raw_response_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMDiscoveryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMDiscoveryRequest_descriptor_;
  metadata.reflection = RDMDiscoveryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMFrameTiming::kResponseDelayFieldNumber;
const int RDMFrameTiming::kBreakTimeFieldNumber;
const int RDMFrameTiming::kMarkTimeFieldNumber;
const int RDMFrameTiming::kDataTimeFieldNumber;
#endif  // !_MSC_VER

RDMFrameTiming::RDMFrameTiming()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMFrameTiming)
}

void RDMFrameTiming::InitAsDefaultInstance() {
}

RDMFrameTiming::RDMFrameTiming(const RDMFrameTiming& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMFrameTiming)
}

void RDMFrameTiming::SharedCtor() {
  _cached_size_ = 0;
  response_delay_ = 0;
  break_time_ = 0;
  mark_time_ = 0;
  data_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMFrameTiming::~RDMFrameTiming() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMFrameTiming)
  SharedDtor();
}

void RDMFrameTiming::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RDMFrameTiming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMFrameTiming::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMFrameTiming_descriptor_;
}

const RDMFrameTiming& RDMFrameTiming::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMFrameTiming* RDMFrameTiming::default_instance_ = NULL;

RDMFrameTiming* RDMFrameTiming::New() const {
  return new RDMFrameTiming;
}

void RDMFrameTiming::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDMFrameTiming*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(response_delay_, data_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMFrameTiming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMFrameTiming)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 response_delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_delay_)));
          set_has_response_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_break_time;
        break;
      }

      // optional int32 break_time = 2;
      case 2: {
        if (tag == 16) {
         parse_break_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_time_)));
          set_has_break_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mark_time;
        break;
      }

      // optional int32 mark_time = 3;
      case 3: {
        if (tag == 24) {
         parse_mark_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_time_)));
          set_has_mark_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_time;
        break;
      }

      // optional int32 data_time = 4;
      case 4: {
        if (tag == 32) {
         parse_data_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_time_)));
          set_has_data_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMFrameTiming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMFrameTiming)
  return false;
#undef DO_
}

void RDMFrameTiming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMFrameTiming)
  // optional int32 response_delay = 1;
  if (has_response_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_delay(), output);
  }

  // optional int32 break_time = 2;
  if (has_break_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->break_time(), output);
  }

  // optional int32 mark_time = 3;
  if (has_mark_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mark_time(), output);
  }

  // optional int32 data_time = 4;
  if (has_data_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMFrameTiming)
}

::google::protobuf::uint8* RDMFrameTiming::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMFrameTiming)
  // optional int32 response_delay = 1;
  if (has_response_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_delay(), target);
  }

  // optional int32 break_time = 2;
  if (has_break_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->break_time(), target);
  }

  // optional int32 mark_time = 3;
  if (has_mark_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mark_time(), target);
  }

  // optional int32 data_time = 4;
  if (has_data_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMFrameTiming)
  return target;
}

int RDMFrameTiming::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 response_delay = 1;
    if (has_response_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_delay());
    }

    // optional int32 break_time = 2;
    if (has_break_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_time());
    }

    // optional int32 mark_time = 3;
    if (has_mark_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_time());
    }

    // optional int32 data_time = 4;
    if (has_data_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMFrameTiming::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMFrameTiming* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMFrameTiming*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMFrameTiming::MergeFrom(const RDMFrameTiming& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_delay()) {
      set_response_delay(from.response_delay());
    }
    if (from.has_break_time()) {
      set_break_time(from.break_time());
    }
    if (from.has_mark_time()) {
      set_mark_time(from.mark_time());
    }
    if (from.has_data_time()) {
      set_data_time(from.data_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMFrameTiming::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMFrameTiming::CopyFrom(const RDMFrameTiming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMFrameTiming::IsInitialized() const {

  return true;
}

void RDMFrameTiming::Swap(RDMFrameTiming* other) {
  if (other != this) {
    std::swap(response_delay_, other->response_delay_);
    std::swap(break_time_, other->break_time_);
    std::swap(mark_time_, other->mark_time_);
    std::swap(data_time_, other->data_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMFrameTiming::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMFrameTiming_descriptor_;
  metadata.reflection = RDMFrameTiming_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMFrame::kRawResponseFieldNumber;
const int RDMFrame::kTimingFieldNumber;
#endif  // !_MSC_VER

RDMFrame::RDMFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMFrame)
}

void RDMFrame::InitAsDefaultInstance() {
  timing_ = const_cast< ::ola::proto::RDMFrameTiming*>(&::ola::proto::RDMFrameTiming::default_instance());
}

RDMFrame::RDMFrame(const RDMFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMFrame)
}

void RDMFrame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raw_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMFrame::~RDMFrame() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMFrame)
  SharedDtor();
}

void RDMFrame::SharedDtor() {
  if (raw_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_response_;
  }
  if (this != default_instance_) {
    delete timing_;
  }
}

void RDMFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMFrame_descriptor_;
}

const RDMFrame& RDMFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMFrame* RDMFrame::default_instance_ = NULL;

RDMFrame* RDMFrame::New() const {
  return new RDMFrame;
}

void RDMFrame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_raw_response()) {
      if (raw_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_response_->clear();
      }
    }
    if (has_timing()) {
      if (timing_ != NULL) timing_->::ola::proto::RDMFrameTiming::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timing;
        break;
      }

      // optional .ola.proto.RDMFrameTiming timing = 2;
      case 2: {
        if (tag == 18) {
         parse_timing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMFrame)
  return false;
#undef DO_
}

void RDMFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMFrame)
  // optional bytes raw_response = 1;
  if (has_raw_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_response(), output);
  }

  // optional .ola.proto.RDMFrameTiming timing = 2;
  if (has_timing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMFrame)
}

::google::protobuf::uint8* RDMFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMFrame)
  // optional bytes raw_response = 1;
  if (has_raw_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw_response(), target);
  }

  // optional .ola.proto.RDMFrameTiming timing = 2;
  if (has_timing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMFrame)
  return target;
}

int RDMFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes raw_response = 1;
    if (has_raw_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_response());
    }

    // optional .ola.proto.RDMFrameTiming timing = 2;
    if (has_timing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMFrame::MergeFrom(const RDMFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_response()) {
      set_raw_response(from.raw_response());
    }
    if (from.has_timing()) {
      mutable_timing()->::ola::proto::RDMFrameTiming::MergeFrom(from.timing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMFrame::CopyFrom(const RDMFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMFrame::IsInitialized() const {

  return true;
}

void RDMFrame::Swap(RDMFrame* other) {
  if (other != this) {
    std::swap(raw_response_, other->raw_response_);
    std::swap(timing_, other->timing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMFrame_descriptor_;
  metadata.reflection = RDMFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDMResponse::kResponseCodeFieldNumber;
const int RDMResponse::kSourceUidFieldNumber;
const int RDMResponse::kDestUidFieldNumber;
const int RDMResponse::kTransactionNumberFieldNumber;
const int RDMResponse::kResponseTypeFieldNumber;
const int RDMResponse::kMessageCountFieldNumber;
const int RDMResponse::kSubDeviceFieldNumber;
const int RDMResponse::kCommandClassFieldNumber;
const int RDMResponse::kParamIdFieldNumber;
const int RDMResponse::kDataFieldNumber;
const int RDMResponse::kRawResponseFieldNumber;
const int RDMResponse::kRawFrameFieldNumber;
#endif  // !_MSC_VER

RDMResponse::RDMResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.RDMResponse)
}

void RDMResponse::InitAsDefaultInstance() {
  source_uid_ = const_cast< ::ola::proto::UID*>(&::ola::proto::UID::default_instance());
  dest_uid_ = const_cast< ::ola::proto::UID*>(&::ola::proto::UID::default_instance());
}

RDMResponse::RDMResponse(const RDMResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMResponse)
}

void RDMResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  source_uid_ = NULL;
  dest_uid_ = NULL;
  transaction_number_ = 0;
  response_type_ = 0;
  message_count_ = 0u;
  sub_device_ = 0u;
  command_class_ = 0;
  param_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDMResponse::~RDMResponse() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMResponse)
  SharedDtor();
}

void RDMResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete source_uid_;
    delete dest_uid_;
  }
}

void RDMResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDMResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDMResponse_descriptor_;
}

const RDMResponse& RDMResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

RDMResponse* RDMResponse::default_instance_ = NULL;

RDMResponse* RDMResponse::New() const {
  return new RDMResponse;
}

void RDMResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDMResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(response_code_, transaction_number_);
    ZR_(response_type_, command_class_);
    if (has_source_uid()) {
      if (source_uid_ != NULL) source_uid_->::ola::proto::UID::Clear();
    }
    if (has_dest_uid()) {
      if (dest_uid_ != NULL) dest_uid_->::ola::proto::UID::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    param_id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  raw_response_.Clear();
  raw_frame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDMResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.RDMResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ola.proto.RDMResponseCode response_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::RDMResponseCode_IsValid(value)) {
            set_response_code(static_cast< ::ola::proto::RDMResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_response_type;
        break;
      }

      // optional .ola.proto.RDMResponseType response_type = 2;
      case 2: {
        if (tag == 16) {
         parse_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::RDMResponseType_IsValid(value)) {
            set_response_type(static_cast< ::ola::proto::RDMResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_count;
        break;
      }

      // optional uint32 message_count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
          set_has_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param_id;
        break;
      }

      // optional uint32 param_id = 5;
      case 5: {
        if (tag == 40) {
         parse_param_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_id_)));
          set_has_param_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_command_class;
        break;
      }

      // optional .ola.proto.RDMCommandClass command_class = 6;
      case 6: {
        if (tag == 48) {
         parse_command_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::RDMCommandClass_IsValid(value)) {
            set_command_class(static_cast< ::ola::proto::RDMCommandClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sub_device;
        break;
      }

      // optional uint32 sub_device = 7;
      case 7: {
        if (tag == 56) {
         parse_sub_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_device_)));
          set_has_sub_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_raw_response;
        break;
      }

      // repeated bytes raw_response = 8;
      case 8: {
        if (tag == 66) {
         parse_raw_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_raw_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_raw_response;
        if (input->ExpectTag(74)) goto parse_source_uid;
        break;
      }

      // optional .ola.proto.UID source_uid = 9;
      case 9: {
        if (tag == 74) {
         parse_source_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dest_uid;
        break;
      }

      // optional .ola.proto.UID dest_uid = 10;
      case 10: {
        if (tag == 82) {
         parse_dest_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_transaction_number;
        break;
      }

      // optional int32 transaction_number = 11;
      case 11: {
        if (tag == 88) {
         parse_transaction_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transaction_number_)));
          set_has_transaction_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_raw_frame;
        break;
      }

      // repeated .ola.proto.RDMFrame raw_frame = 12;
      case 12: {
        if (tag == 98) {
         parse_raw_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raw_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_raw_frame;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.RDMResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.RDMResponse)
  return false;
#undef DO_
}

void RDMResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.RDMResponse)
  // required .ola.proto.RDMResponseCode response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_code(), output);
  }

  // optional .ola.proto.RDMResponseType response_type = 2;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // optional uint32 message_count = 3 [default = 0];
  if (has_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_count(), output);
  }

  // optional bytes data = 4 [default = ""];
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 param_id = 5;
  if (has_param_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param_id(), output);
  }

  // optional .ola.proto.RDMCommandClass command_class = 6;
  if (has_command_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->command_class(), output);
  }

  // optional uint32 sub_device = 7;
  if (has_sub_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sub_device(), output);
  }

  // repeated bytes raw_response = 8;
  for (int i = 0; i < this->raw_response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->raw_response(i), output);
  }

  // optional .ola.proto.UID source_uid = 9;
  if (has_source_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->source_uid(), output);
  }

  // optional .ola.proto.UID dest_uid = 10;
  if (has_dest_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dest_uid(), output);
  }

  // optional int32 transaction_number = 11;
  if (has_transaction_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->transaction_number(), output);
  }

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  for (int i = 0; i < this->raw_frame_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->raw_frame(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.RDMResponse)
}

::google::protobuf::uint8* RDMResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMResponse)
  // required .ola.proto.RDMResponseCode response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_code(), target);
  }

  // optional .ola.proto.RDMResponseType response_type = 2;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response_type(), target);
  }

  // optional uint32 message_count = 3 [default = 0];
  if (has_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_count(), target);
  }

  // optional bytes data = 4 [default = ""];
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 param_id = 5;
  if (has_param_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param_id(), target);
  }

  // optional .ola.proto.RDMCommandClass command_class = 6;
  if (has_command_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->command_class(), target);
  }

  // optional uint32 sub_device = 7;
  if (has_sub_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sub_device(), target);
  }

  // repeated bytes raw_response = 8;
  for (int i = 0; i < this->raw_response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->raw_response(i), target);
  }

  // optional .ola.proto.UID source_uid = 9;
  if (has_source_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->source_uid(), target);
  }

  // optional .ola.proto.UID dest_uid = 10;
  if (has_dest_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dest_uid(), target);
  }

  // optional int32 transaction_number = 11;
  if (has_transaction_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->transaction_number(), target);
  }

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  for (int i = 0; i < this->raw_frame_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->raw_frame(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMResponse)
  return target;
}

int RDMResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ola.proto.RDMResponseCode response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
    }

    // optional .ola.proto.UID source_uid = 9;
    if (has_source_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_uid());
    }

    // optional .ola.proto.UID dest_uid = 10;
    if (has_dest_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_uid());
    }

    // optional int32 transaction_number = 11;
    if (has_transaction_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transaction_number());
    }

    // optional .ola.proto.RDMResponseType response_type = 2;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional uint32 message_count = 3 [default = 0];
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

    // optional uint32 sub_device = 7;
    if (has_sub_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_device());
    }

    // optional .ola.proto.RDMCommandClass command_class = 6;
    if (has_command_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_class());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 param_id = 5;
    if (has_param_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_id());
    }

    // optional bytes data = 4 [default = ""];
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated bytes raw_response = 8;
  total_size += 1 * this->raw_response_size();
  for (int i = 0; i < this->raw_response_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->raw_response(i));
  }

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  total_size += 1 * this->raw_frame_size();
  for (int i = 0; i < this->raw_frame_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw_frame(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDMResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDMResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDMResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDMResponse::MergeFrom(const RDMResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  raw_response_.MergeFrom(from.raw_response_);
  raw_frame_.MergeFrom(from.raw_frame_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_source_uid()) {
      mutable_source_uid()->::ola::proto::UID::MergeFrom(from.source_uid());
    }
    if (from.has_dest_uid()) {
      mutable_dest_uid()->::ola::proto::UID::MergeFrom(from.dest_uid());
    }
    if (from.has_transaction_number()) {
      set_transaction_number(from.transaction_number());
    }
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_message_count()) {
      set_message_count(from.message_count());
    }
    if (from.has_sub_device()) {
      set_sub_device(from.sub_device());
    }
    if (from.has_command_class()) {
      set_command_class(from.command_class());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param_id()) {
      set_param_id(from.param_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDMResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMResponse::CopyFrom(const RDMResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_source_uid()) {
    if (!this->source_uid().IsInitialized()) return false;
  }
  if (has_dest_uid()) {
    if (!this->dest_uid().IsInitialized()) return false;
  }
  return true;
}

void RDMResponse::Swap(RDMResponse* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(source_uid_, other->source_uid_);
    std::swap(dest_uid_, other->dest_uid_);
    std::swap(transaction_number_, other->transaction_number_);
    std::swap(response_type_, other->response_type_);
    std::swap(message_count_, other->message_count_);
    std::swap(sub_device_, other->sub_device_);
    std::swap(command_class_, other->command_class_);
    std::swap(param_id_, other->param_id_);
    std::swap(data_, other->data_);
    raw_response_.Swap(&other->raw_response_);
    raw_frame_.Swap(&other->raw_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDMResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDMResponse_descriptor_;
  metadata.reflection = RDMResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeCode::kHoursFieldNumber;
const int TimeCode::kMinutesFieldNumber;
const int TimeCode::kSecondsFieldNumber;
const int TimeCode::kFramesFieldNumber;
const int TimeCode::kTypeFieldNumber;
#endif  // !_MSC_VER

TimeCode::TimeCode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.proto.TimeCode)
}

void TimeCode::InitAsDefaultInstance() {
}

TimeCode::TimeCode(const TimeCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.proto.TimeCode)
}

void TimeCode::SharedCtor() {
  _cached_size_ = 0;
  hours_ = 0u;
  minutes_ = 0u;
  seconds_ = 0u;
  frames_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeCode::~TimeCode() {
  // @@protoc_insertion_point(destructor:ola.proto.TimeCode)
  SharedDtor();
}

void TimeCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeCode_descriptor_;
}

const TimeCode& TimeCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ola_2eproto();
  return *default_instance_;
}

TimeCode* TimeCode::default_instance_ = NULL;

TimeCode* TimeCode::New() const {
  return new TimeCode;
}

void TimeCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hours_, type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.proto.TimeCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hours = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }

      // required uint32 minutes = 2;
      case 2: {
        if (tag == 16) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // required uint32 seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frames;
        break;
      }

      // required uint32 frames = 4;
      case 4: {
        if (tag == 32) {
         parse_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frames_)));
          set_has_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .ola.proto.TimeCodeType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::proto::TimeCodeType_IsValid(value)) {
            set_type(static_cast< ::ola::proto::TimeCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.proto.TimeCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.proto.TimeCode)
  return false;
#undef DO_
}

void TimeCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.proto.TimeCode)
  // required uint32 hours = 1;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hours(), output);
  }

  // required uint32 minutes = 2;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minutes(), output);
  }

  // required uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  // required uint32 frames = 4;
  if (has_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frames(), output);
  }

  // required .ola.proto.TimeCodeType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.proto.TimeCode)
}

::google::protobuf::uint8* TimeCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.TimeCode)
  // required uint32 hours = 1;
  if (has_hours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hours(), target);
  }

  // required uint32 minutes = 2;
  if (has_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minutes(), target);
  }

  // required uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  // required uint32 frames = 4;
  if (has_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frames(), target);
  }

  // required .ola.proto.TimeCodeType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.TimeCode)
  return target;
}

int TimeCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hours = 1;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hours());
    }

    // required uint32 minutes = 2;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minutes());
    }

    // required uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // required uint32 frames = 4;
    if (has_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frames());
    }

    // required .ola.proto.TimeCodeType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeCode::MergeFrom(const TimeCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hours()) {
      set_hours(from.hours());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_frames()) {
      set_frames(from.frames());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeCode::CopyFrom(const TimeCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TimeCode::Swap(TimeCode* other) {
  if (other != this) {
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(frames_, other->frames_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeCode_descriptor_;
  metadata.reflection = TimeCode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ola

// @@protoc_insertion_point(global_scope)
