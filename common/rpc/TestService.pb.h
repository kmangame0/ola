// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestService.proto

#ifndef PROTOBUF_TestService_2eproto__INCLUDED
#define PROTOBUF_TestService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ola {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestService_2eproto();
void protobuf_AssignDesc_TestService_2eproto();
void protobuf_ShutdownFile_TestService_2eproto();

class EchoRequest;
class EchoReply;
class STREAMING_NO_RESPONSE;

// ===================================================================

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  void Swap(EchoRequest* other);

  // implements Message ----------------------------------------------

  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int64 session_ptr = 2;
  inline bool has_session_ptr() const;
  inline void clear_session_ptr();
  static const int kSessionPtrFieldNumber = 2;
  inline ::google::protobuf::int64 session_ptr() const;
  inline void set_session_ptr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ola.rpc.EchoRequest)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_session_ptr();
  inline void clear_has_session_ptr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int64 session_ptr_;
  friend void  protobuf_AddDesc_TestService_2eproto();
  friend void protobuf_AssignDesc_TestService_2eproto();
  friend void protobuf_ShutdownFile_TestService_2eproto();

  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoReply : public ::google::protobuf::Message {
 public:
  EchoReply();
  virtual ~EchoReply();

  EchoReply(const EchoReply& from);

  inline EchoReply& operator=(const EchoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoReply& default_instance();

  void Swap(EchoReply* other);

  // implements Message ----------------------------------------------

  EchoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoReply& from);
  void MergeFrom(const EchoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ola.rpc.EchoReply)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_TestService_2eproto();
  friend void protobuf_AssignDesc_TestService_2eproto();
  friend void protobuf_ShutdownFile_TestService_2eproto();

  void InitAsDefaultInstance();
  static EchoReply* default_instance_;
};
// -------------------------------------------------------------------

class STREAMING_NO_RESPONSE : public ::google::protobuf::Message {
 public:
  STREAMING_NO_RESPONSE();
  virtual ~STREAMING_NO_RESPONSE();

  STREAMING_NO_RESPONSE(const STREAMING_NO_RESPONSE& from);

  inline STREAMING_NO_RESPONSE& operator=(const STREAMING_NO_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STREAMING_NO_RESPONSE& default_instance();

  void Swap(STREAMING_NO_RESPONSE* other);

  // implements Message ----------------------------------------------

  STREAMING_NO_RESPONSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STREAMING_NO_RESPONSE& from);
  void MergeFrom(const STREAMING_NO_RESPONSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ola.rpc.STREAMING_NO_RESPONSE)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_TestService_2eproto();
  friend void protobuf_AssignDesc_TestService_2eproto();
  friend void protobuf_ShutdownFile_TestService_2eproto();

  void InitAsDefaultInstance();
  static STREAMING_NO_RESPONSE* default_instance_;
};
// ===================================================================


// ===================================================================

// EchoRequest

// required string data = 1;
inline bool EchoRequest::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& EchoRequest::data() const {
  // @@protoc_insertion_point(field_get:ola.rpc.EchoRequest.data)
  return *data_;
}
inline void EchoRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rpc.EchoRequest.data)
}
inline void EchoRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rpc.EchoRequest.data)
}
inline void EchoRequest::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rpc.EchoRequest.data)
}
inline ::std::string* EchoRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rpc.EchoRequest.data)
  return data_;
}
inline ::std::string* EchoRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rpc.EchoRequest.data)
}

// optional int64 session_ptr = 2;
inline bool EchoRequest::has_session_ptr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoRequest::set_has_session_ptr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoRequest::clear_has_session_ptr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoRequest::clear_session_ptr() {
  session_ptr_ = GOOGLE_LONGLONG(0);
  clear_has_session_ptr();
}
inline ::google::protobuf::int64 EchoRequest::session_ptr() const {
  // @@protoc_insertion_point(field_get:ola.rpc.EchoRequest.session_ptr)
  return session_ptr_;
}
inline void EchoRequest::set_session_ptr(::google::protobuf::int64 value) {
  set_has_session_ptr();
  session_ptr_ = value;
  // @@protoc_insertion_point(field_set:ola.rpc.EchoRequest.session_ptr)
}

// -------------------------------------------------------------------

// EchoReply

// required string data = 1;
inline bool EchoReply::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoReply::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoReply::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoReply::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& EchoReply::data() const {
  // @@protoc_insertion_point(field_get:ola.rpc.EchoReply.data)
  return *data_;
}
inline void EchoReply::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ola.rpc.EchoReply.data)
}
inline void EchoReply::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.rpc.EchoReply.data)
}
inline void EchoReply::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.rpc.EchoReply.data)
}
inline ::std::string* EchoReply::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ola.rpc.EchoReply.data)
  return data_;
}
inline ::std::string* EchoReply::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoReply::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ola.rpc.EchoReply.data)
}

// -------------------------------------------------------------------

// STREAMING_NO_RESPONSE


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ola

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestService_2eproto__INCLUDED
