// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArtNetConfigMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArtNetConfigMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ola {
namespace plugin {
namespace artnet {

namespace {

const ::google::protobuf::Descriptor* OptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_ReplyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArtNetConfigMessages_2eproto() {
  protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArtNetConfigMessages.proto");
  GOOGLE_CHECK(file != NULL);
  OptionsRequest_descriptor_ = file->message_type(0);
  static const int OptionsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, subnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, net_),
  };
  OptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionsRequest_descriptor_,
      OptionsRequest::default_instance_,
      OptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionsRequest));
  OptionsReply_descriptor_ = file->message_type(1);
  static const int OptionsReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, subnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, net_),
  };
  OptionsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionsReply_descriptor_,
      OptionsReply::default_instance_,
      OptionsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionsReply));
  NodeListRequest_descriptor_ = file->message_type(2);
  static const int NodeListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, universe_),
  };
  NodeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeListRequest_descriptor_,
      NodeListRequest::default_instance_,
      NodeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeListRequest));
  OutputNode_descriptor_ = file->message_type(3);
  static const int OutputNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputNode, ip_address_),
  };
  OutputNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputNode_descriptor_,
      OutputNode::default_instance_,
      OutputNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputNode));
  NodeListReply_descriptor_ = file->message_type(4);
  static const int NodeListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListReply, node_),
  };
  NodeListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeListReply_descriptor_,
      NodeListReply::default_instance_,
      NodeListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeListReply));
  Request_descriptor_ = file->message_type(5);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, node_list_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_RequestType_descriptor_ = Request_descriptor_->enum_type(0);
  Reply_descriptor_ = file->message_type(6);
  static const int Reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, node_list_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_ReplyType_descriptor_ = Reply_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArtNetConfigMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionsRequest_descriptor_, &OptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionsReply_descriptor_, &OptionsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeListRequest_descriptor_, &NodeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputNode_descriptor_, &OutputNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeListReply_descriptor_, &NodeListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArtNetConfigMessages_2eproto() {
  delete OptionsRequest::default_instance_;
  delete OptionsRequest_reflection_;
  delete OptionsReply::default_instance_;
  delete OptionsReply_reflection_;
  delete NodeListRequest::default_instance_;
  delete NodeListRequest_reflection_;
  delete OutputNode::default_instance_;
  delete OutputNode_reflection_;
  delete NodeListReply::default_instance_;
  delete NodeListReply_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
}

void protobuf_AddDesc_ArtNetConfigMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ArtNetConfigMessages.proto\022\021ola.plugin"
    ".artnet\"T\n\016OptionsRequest\022\022\n\nshort_name\030"
    "\001 \001(\t\022\021\n\tlong_name\030\002 \001(\t\022\016\n\006subnet\030\003 \001(\005"
    "\022\013\n\003net\030\004 \001(\005\"b\n\014OptionsReply\022\016\n\006status\030"
    "\001 \002(\r\022\022\n\nshort_name\030\002 \002(\t\022\021\n\tlong_name\030\003"
    " \002(\t\022\016\n\006subnet\030\004 \002(\005\022\013\n\003net\030\005 \002(\005\"#\n\017Nod"
    "eListRequest\022\020\n\010universe\030\001 \002(\005\" \n\nOutput"
    "Node\022\022\n\nip_address\030\001 \002(\r\"<\n\rNodeListRepl"
    "y\022+\n\004node\030\001 \003(\0132\035.ola.plugin.artnet.Outp"
    "utNode\"\363\001\n\007Request\0224\n\004type\030\001 \002(\0162&.ola.p"
    "lugin.artnet.Request.RequestType\0222\n\007opti"
    "ons\030\002 \001(\0132!.ola.plugin.artnet.OptionsReq"
    "uest\0225\n\tnode_list\030\003 \001(\0132\".ola.plugin.art"
    "net.NodeListRequest\"G\n\013RequestType\022\032\n\026AR"
    "TNET_OPTIONS_REQUEST\020\001\022\034\n\030ARTNET_NODE_LI"
    "ST_REQUEST\020\002\"\343\001\n\005Reply\0220\n\004type\030\001 \002(\0162\".o"
    "la.plugin.artnet.Reply.ReplyType\0220\n\007opti"
    "ons\030\002 \001(\0132\037.ola.plugin.artnet.OptionsRep"
    "ly\0223\n\tnode_list\030\003 \001(\0132 .ola.plugin.artne"
    "t.NodeListReply\"A\n\tReplyType\022\030\n\024ARTNET_O"
    "PTIONS_REPLY\020\001\022\032\n\026ARTNET_NODE_LIST_REPLY"
    "\020\002", 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArtNetConfigMessages.proto", &protobuf_RegisterTypes);
  OptionsRequest::default_instance_ = new OptionsRequest();
  OptionsReply::default_instance_ = new OptionsReply();
  NodeListRequest::default_instance_ = new NodeListRequest();
  OutputNode::default_instance_ = new OutputNode();
  NodeListReply::default_instance_ = new NodeListReply();
  Request::default_instance_ = new Request();
  Reply::default_instance_ = new Reply();
  OptionsRequest::default_instance_->InitAsDefaultInstance();
  OptionsReply::default_instance_->InitAsDefaultInstance();
  NodeListRequest::default_instance_->InitAsDefaultInstance();
  OutputNode::default_instance_->InitAsDefaultInstance();
  NodeListReply::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArtNetConfigMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArtNetConfigMessages_2eproto {
  StaticDescriptorInitializer_ArtNetConfigMessages_2eproto() {
    protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  }
} static_descriptor_initializer_ArtNetConfigMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OptionsRequest::kShortNameFieldNumber;
const int OptionsRequest::kLongNameFieldNumber;
const int OptionsRequest::kSubnetFieldNumber;
const int OptionsRequest::kNetFieldNumber;
#endif  // !_MSC_VER

OptionsRequest::OptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.OptionsRequest)
}

void OptionsRequest::InitAsDefaultInstance() {
}

OptionsRequest::OptionsRequest(const OptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OptionsRequest)
}

void OptionsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnet_ = 0;
  net_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionsRequest::~OptionsRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OptionsRequest)
  SharedDtor();
}

void OptionsRequest::SharedDtor() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (long_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete long_name_;
  }
  if (this != default_instance_) {
  }
}

void OptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionsRequest_descriptor_;
}

const OptionsRequest& OptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

OptionsRequest* OptionsRequest::default_instance_ = NULL;

OptionsRequest* OptionsRequest::New() const {
  return new OptionsRequest;
}

void OptionsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OptionsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(subnet_, net_);
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_name_->clear();
      }
    }
    if (has_long_name()) {
      if (long_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        long_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.OptionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string short_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_long_name;
        break;
      }

      // optional string long_name = 2;
      case 2: {
        if (tag == 18) {
         parse_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->long_name().data(), this->long_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "long_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subnet;
        break;
      }

      // optional int32 subnet = 3;
      case 3: {
        if (tag == 24) {
         parse_subnet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subnet_)));
          set_has_subnet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_net;
        break;
      }

      // optional int32 net = 4;
      case 4: {
        if (tag == 32) {
         parse_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_)));
          set_has_net();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.OptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.OptionsRequest)
  return false;
#undef DO_
}

void OptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.OptionsRequest)
  // optional string short_name = 1;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->short_name(), output);
  }

  // optional string long_name = 2;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "long_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->long_name(), output);
  }

  // optional int32 subnet = 3;
  if (has_subnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subnet(), output);
  }

  // optional int32 net = 4;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->net(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.OptionsRequest)
}

::google::protobuf::uint8* OptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OptionsRequest)
  // optional string short_name = 1;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->short_name(), target);
  }

  // optional string long_name = 2;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "long_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->long_name(), target);
  }

  // optional int32 subnet = 3;
  if (has_subnet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subnet(), target);
  }

  // optional int32 net = 4;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->net(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OptionsRequest)
  return target;
}

int OptionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string short_name = 1;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional string long_name = 2;
    if (has_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
    }

    // optional int32 subnet = 3;
    if (has_subnet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subnet());
    }

    // optional int32 net = 4;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionsRequest::MergeFrom(const OptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_long_name()) {
      set_long_name(from.long_name());
    }
    if (from.has_subnet()) {
      set_subnet(from.subnet());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsRequest::CopyFrom(const OptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsRequest::IsInitialized() const {

  return true;
}

void OptionsRequest::Swap(OptionsRequest* other) {
  if (other != this) {
    std::swap(short_name_, other->short_name_);
    std::swap(long_name_, other->long_name_);
    std::swap(subnet_, other->subnet_);
    std::swap(net_, other->net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionsRequest_descriptor_;
  metadata.reflection = OptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionsReply::kStatusFieldNumber;
const int OptionsReply::kShortNameFieldNumber;
const int OptionsReply::kLongNameFieldNumber;
const int OptionsReply::kSubnetFieldNumber;
const int OptionsReply::kNetFieldNumber;
#endif  // !_MSC_VER

OptionsReply::OptionsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.OptionsReply)
}

void OptionsReply::InitAsDefaultInstance() {
}

OptionsReply::OptionsReply(const OptionsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OptionsReply)
}

void OptionsReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0u;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnet_ = 0;
  net_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionsReply::~OptionsReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OptionsReply)
  SharedDtor();
}

void OptionsReply::SharedDtor() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (long_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete long_name_;
  }
  if (this != default_instance_) {
  }
}

void OptionsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionsReply_descriptor_;
}

const OptionsReply& OptionsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

OptionsReply* OptionsReply::default_instance_ = NULL;

OptionsReply* OptionsReply::New() const {
  return new OptionsReply;
}

void OptionsReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OptionsReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(status_, subnet_);
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_name_->clear();
      }
    }
    if (has_long_name()) {
      if (long_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        long_name_->clear();
      }
    }
    net_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.OptionsReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_short_name;
        break;
      }

      // required string short_name = 2;
      case 2: {
        if (tag == 18) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_long_name;
        break;
      }

      // required string long_name = 3;
      case 3: {
        if (tag == 26) {
         parse_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->long_name().data(), this->long_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "long_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subnet;
        break;
      }

      // required int32 subnet = 4;
      case 4: {
        if (tag == 32) {
         parse_subnet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subnet_)));
          set_has_subnet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_net;
        break;
      }

      // required int32 net = 5;
      case 5: {
        if (tag == 40) {
         parse_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_)));
          set_has_net();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.OptionsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.OptionsReply)
  return false;
#undef DO_
}

void OptionsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.OptionsReply)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required string short_name = 2;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->short_name(), output);
  }

  // required string long_name = 3;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "long_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->long_name(), output);
  }

  // required int32 subnet = 4;
  if (has_subnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->subnet(), output);
  }

  // required int32 net = 5;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->net(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.OptionsReply)
}

::google::protobuf::uint8* OptionsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OptionsReply)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required string short_name = 2;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->short_name(), target);
  }

  // required string long_name = 3;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "long_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->long_name(), target);
  }

  // required int32 subnet = 4;
  if (has_subnet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->subnet(), target);
  }

  // required int32 net = 5;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->net(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OptionsReply)
  return target;
}

int OptionsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required string short_name = 2;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // required string long_name = 3;
    if (has_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
    }

    // required int32 subnet = 4;
    if (has_subnet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subnet());
    }

    // required int32 net = 5;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionsReply::MergeFrom(const OptionsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_long_name()) {
      set_long_name(from.long_name());
    }
    if (from.has_subnet()) {
      set_subnet(from.subnet());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsReply::CopyFrom(const OptionsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void OptionsReply::Swap(OptionsReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(short_name_, other->short_name_);
    std::swap(long_name_, other->long_name_);
    std::swap(subnet_, other->subnet_);
    std::swap(net_, other->net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionsReply_descriptor_;
  metadata.reflection = OptionsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeListRequest::kUniverseFieldNumber;
#endif  // !_MSC_VER

NodeListRequest::NodeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.NodeListRequest)
}

void NodeListRequest::InitAsDefaultInstance() {
}

NodeListRequest::NodeListRequest(const NodeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.NodeListRequest)
}

void NodeListRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeListRequest::~NodeListRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.NodeListRequest)
  SharedDtor();
}

void NodeListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeListRequest_descriptor_;
}

const NodeListRequest& NodeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

NodeListRequest* NodeListRequest::default_instance_ = NULL;

NodeListRequest* NodeListRequest::New() const {
  return new NodeListRequest;
}

void NodeListRequest::Clear() {
  universe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.NodeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 universe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &universe_)));
          set_has_universe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.NodeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.NodeListRequest)
  return false;
#undef DO_
}

void NodeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.NodeListRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->universe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.NodeListRequest)
}

::google::protobuf::uint8* NodeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.NodeListRequest)
  // required int32 universe = 1;
  if (has_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->universe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.NodeListRequest)
  return target;
}

int NodeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->universe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeListRequest::MergeFrom(const NodeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListRequest::CopyFrom(const NodeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeListRequest::Swap(NodeListRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeListRequest_descriptor_;
  metadata.reflection = NodeListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutputNode::kIpAddressFieldNumber;
#endif  // !_MSC_VER

OutputNode::OutputNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.OutputNode)
}

void OutputNode::InitAsDefaultInstance() {
}

OutputNode::OutputNode(const OutputNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OutputNode)
}

void OutputNode::SharedCtor() {
  _cached_size_ = 0;
  ip_address_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputNode::~OutputNode() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OutputNode)
  SharedDtor();
}

void OutputNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutputNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputNode_descriptor_;
}

const OutputNode& OutputNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

OutputNode* OutputNode::default_instance_ = NULL;

OutputNode* OutputNode::New() const {
  return new OutputNode;
}

void OutputNode::Clear() {
  ip_address_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.OutputNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip_address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_address_)));
          set_has_ip_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.OutputNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.OutputNode)
  return false;
#undef DO_
}

void OutputNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.OutputNode)
  // required uint32 ip_address = 1;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.OutputNode)
}

::google::protobuf::uint8* OutputNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OutputNode)
  // required uint32 ip_address = 1;
  if (has_ip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OutputNode)
  return target;
}

int OutputNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip_address = 1;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputNode::MergeFrom(const OutputNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_address()) {
      set_ip_address(from.ip_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputNode::CopyFrom(const OutputNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OutputNode::Swap(OutputNode* other) {
  if (other != this) {
    std::swap(ip_address_, other->ip_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputNode_descriptor_;
  metadata.reflection = OutputNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeListReply::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeListReply::NodeListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.NodeListReply)
}

void NodeListReply::InitAsDefaultInstance() {
}

NodeListReply::NodeListReply(const NodeListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.NodeListReply)
}

void NodeListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeListReply::~NodeListReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.NodeListReply)
  SharedDtor();
}

void NodeListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeListReply_descriptor_;
}

const NodeListReply& NodeListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

NodeListReply* NodeListReply::default_instance_ = NULL;

NodeListReply* NodeListReply::New() const {
  return new NodeListReply;
}

void NodeListReply::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.NodeListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ola.plugin.artnet.OutputNode node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.NodeListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.NodeListReply)
  return false;
#undef DO_
}

void NodeListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.NodeListReply)
  // repeated .ola.plugin.artnet.OutputNode node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.NodeListReply)
}

::google::protobuf::uint8* NodeListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.NodeListReply)
  // repeated .ola.plugin.artnet.OutputNode node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.NodeListReply)
  return target;
}

int NodeListReply::ByteSize() const {
  int total_size = 0;

  // repeated .ola.plugin.artnet.OutputNode node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeListReply::MergeFrom(const NodeListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListReply::CopyFrom(const NodeListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void NodeListReply::Swap(NodeListReply* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeListReply_descriptor_;
  metadata.reflection = NodeListReply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestType_descriptor_;
}
bool Request_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RequestType Request::ARTNET_OPTIONS_REQUEST;
const Request_RequestType Request::ARTNET_NODE_LIST_REQUEST;
const Request_RequestType Request::RequestType_MIN;
const Request_RequestType Request::RequestType_MAX;
const int Request::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kOptionsFieldNumber;
const int Request::kNodeListFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.Request)
}

void Request::InitAsDefaultInstance() {
  options_ = const_cast< ::ola::plugin::artnet::OptionsRequest*>(&::ola::plugin::artnet::OptionsRequest::default_instance());
  node_list_ = const_cast< ::ola::plugin::artnet::NodeListRequest*>(&::ola::plugin::artnet::NodeListRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  options_ = NULL;
  node_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
    delete node_list_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_options()) {
      if (options_ != NULL) options_->::ola::plugin::artnet::OptionsRequest::Clear();
    }
    if (has_node_list()) {
      if (node_list_ != NULL) node_list_->::ola::plugin::artnet::NodeListRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ola.plugin.artnet.Request.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::plugin::artnet::Request_RequestType_IsValid(value)) {
            set_type(static_cast< ::ola::plugin::artnet::Request_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .ola.plugin.artnet.OptionsRequest options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_list;
        break;
      }

      // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
      case 3: {
        if (tag == 26) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.Request)
  // required .ola.plugin.artnet.Request.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ola.plugin.artnet.OptionsRequest options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.Request)
  // required .ola.plugin.artnet.Request.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ola.plugin.artnet.OptionsRequest options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
  if (has_node_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ola.plugin.artnet.Request.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ola.plugin.artnet.OptionsRequest options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
    if (has_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_options()) {
      mutable_options()->::ola::plugin::artnet::OptionsRequest::MergeFrom(from.options());
    }
    if (from.has_node_list()) {
      mutable_node_list()->::ola::plugin::artnet::NodeListRequest::MergeFrom(from.node_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node_list()) {
    if (!this->node_list().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(options_, other->options_);
    std::swap(node_list_, other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_ReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_ReplyType_descriptor_;
}
bool Reply_ReplyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_ReplyType Reply::ARTNET_OPTIONS_REPLY;
const Reply_ReplyType Reply::ARTNET_NODE_LIST_REPLY;
const Reply_ReplyType Reply::ReplyType_MIN;
const Reply_ReplyType Reply::ReplyType_MAX;
const int Reply::ReplyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Reply::kTypeFieldNumber;
const int Reply::kOptionsFieldNumber;
const int Reply::kNodeListFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ola.plugin.artnet.Reply)
}

void Reply::InitAsDefaultInstance() {
  options_ = const_cast< ::ola::plugin::artnet::OptionsReply*>(&::ola::plugin::artnet::OptionsReply::default_instance());
  node_list_ = const_cast< ::ola::plugin::artnet::NodeListReply*>(&::ola::plugin::artnet::NodeListReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  options_ = NULL;
  node_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
    delete node_list_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArtNetConfigMessages_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_options()) {
      if (options_ != NULL) options_->::ola::plugin::artnet::OptionsReply::Clear();
    }
    if (has_node_list()) {
      if (node_list_ != NULL) node_list_->::ola::plugin::artnet::NodeListReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ola.plugin.artnet.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ola.plugin.artnet.Reply.ReplyType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ola::plugin::artnet::Reply_ReplyType_IsValid(value)) {
            set_type(static_cast< ::ola::plugin::artnet::Reply_ReplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .ola.plugin.artnet.OptionsReply options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_list;
        break;
      }

      // optional .ola.plugin.artnet.NodeListReply node_list = 3;
      case 3: {
        if (tag == 26) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ola.plugin.artnet.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ola.plugin.artnet.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ola.plugin.artnet.Reply)
  // required .ola.plugin.artnet.Reply.ReplyType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ola.plugin.artnet.OptionsReply options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional .ola.plugin.artnet.NodeListReply node_list = 3;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ola.plugin.artnet.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.Reply)
  // required .ola.plugin.artnet.Reply.ReplyType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ola.plugin.artnet.OptionsReply options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional .ola.plugin.artnet.NodeListReply node_list = 3;
  if (has_node_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ola.plugin.artnet.Reply.ReplyType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ola.plugin.artnet.OptionsReply options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .ola.plugin.artnet.NodeListReply node_list = 3;
    if (has_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_options()) {
      mutable_options()->::ola::plugin::artnet::OptionsReply::MergeFrom(from.options());
    }
    if (from.has_node_list()) {
      mutable_node_list()->::ola::plugin::artnet::NodeListReply::MergeFrom(from.node_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  if (has_node_list()) {
    if (!this->node_list().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(options_, other->options_);
    std::swap(node_list_, other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artnet
}  // namespace plugin
}  // namespace ola

// @@protoc_insertion_point(global_scope)
